Nonterminals useless in grammar

    liste_declarations
    else
    $@15
    main


Terminals unused in grammar

    CHAR
    WHILE
    NOT
    LAND
    LOR
    STR
    INCLUDE


Rules useless in grammar

   96 liste_declarations: liste_declarations declaration
   97                   | declaration

   98 $@15: %empty

   99 else: ELSE $@15 '{' liste_instructions '}'
  100     | %empty


Rules useless in parser due to conflicts

   50 $@11: %empty

   81 arithmetic: PLUS
   82           | MOINS
   83           | MUL
   84           | DIV

   95 returne: %empty


State 8 conflicts: 1 shift/reduce
State 21 conflicts: 11 shift/reduce, 15 reduce/reduce
State 28 conflicts: 1 reduce/reduce
State 35 conflicts: 11 shift/reduce, 16 reduce/reduce
State 46 conflicts: 11 shift/reduce, 15 reduce/reduce
State 55 conflicts: 14 reduce/reduce
State 56 conflicts: 28 reduce/reduce
State 75 conflicts: 11 shift/reduce, 15 reduce/reduce
State 92 conflicts: 4 shift/reduce
State 95 conflicts: 4 reduce/reduce
State 96 conflicts: 4 reduce/reduce
State 97 conflicts: 4 reduce/reduce
State 98 conflicts: 4 reduce/reduce
State 112 conflicts: 11 shift/reduce, 15 reduce/reduce
State 126 conflicts: 4 shift/reduce
State 127 conflicts: 4 shift/reduce
State 145 conflicts: 11 shift/reduce, 15 reduce/reduce
State 146 conflicts: 1 reduce/reduce
State 153 conflicts: 11 shift/reduce, 15 reduce/reduce
State 154 conflicts: 11 shift/reduce, 15 reduce/reduce


Grammar

    0 $accept: programme1 $end

    1 programme1: liste_fonctions

    2 liste_fonctions: liste_fonctions fonction
    3                | fonction

    4 fonction: nom_fonction '(' ')' '{' liste_instructions '}'
    5         | externs

    6 $@1: %empty

    7 nom_fonction: datatype IDENTIFICATEUR $@1

    8 externs: externs externe
    9        | externe

   10 $@2: %empty

   11 externe: EXTERN datatype IDENTIFICATEUR $@2 '(' liste_parms ')' ';'

   12 liste_parms: liste_parms ',' parm
   13            | parm
   14            | %empty

   15 $@3: %empty

   16 parm: INT $@3 IDENTIFICATEUR

   17 liste_declarateurs: declarateur ',' liste_declarateurs
   18                   | declarateur
   19                   | declarateur init

   20 declarateur: IDENTIFICATEUR

   21 $@4: %empty

   22 declarateur: declarateur '[' CONSTANTE $@4 ']'

   23 declaration: datatype liste_declarateurs ';'

   24 datatype: INT
   25         | VOID

   26 liste_instructions: instruction liste_instructions
   27                   | instruction
   28                   | %empty

   29 instruction: %empty

   30 $@5: %empty

   31 instruction: FOR $@5 '(' instruction1 ';' condition ';' instruction1 ')' instruction
   32            | selection
   33            | instruction1 ';'
   34            | appel
   35            | declaration
   36            | returne
   37            | BREAK ';'

   38 instruction1: %empty

   39 $@6: %empty

   40 instruction1: IDENTIFICATEUR $@6 '=' expression

   41 $@7: %empty

   42 instruction1: IDENTIFICATEUR $@7 relop expression

   43 $@8: %empty

   44 instruction1: IDENTIFICATEUR $@8 UNARY
   45             | UNARY IDENTIFICATEUR

   46 init: '=' valeur

   47 $@9: %empty

   48 $@10: %empty

   49 selection: IF $@9 '(' condition ')' $@10 instruction

   50 $@11: %empty

   51 $@12: %empty

   52 $@13: %empty

   53 selection: IF $@11 '(' condition ')' $@12 instruction $@13 ELSE instruction
   54          | SWITCH '(' expression ')' instruction
   55          | CASE CONSTANTE ':' instruction
   56          | DEFAULT ':' instruction

   57 appel: IDENTIFICATEUR '(' liste_expressions ')' ';'

   58 variable: IDENTIFICATEUR
   59         | tableu

   60 tableu: tableu '[' expression ']'
   61       | IDENTIFICATEUR

   62 expression: '(' expression ')'
   63           | expression binary_op expression
   64           | MOINS expression

   65 $@14: %empty

   66 expression: CONSTANTE $@14
   67           | variable
   68           | IDENTIFICATEUR '(' liste_expressions ')'

   69 liste_expressions: liste_expressions ',' expression
   70                  | expression

   71 binary_op: PLUS
   72          | MOINS
   73          | MUL
   74          | DIV

   75 condition: expression relop expression
   76          | TRUE
   77          | FALSE
   78          | %empty

   79 expression: expression arithmetic expression
   80           | valeur

   81 arithmetic: PLUS
   82           | MOINS
   83           | MUL
   84           | DIV

   85 relop: LT
   86      | GT
   87      | LEQ
   88      | GEQ
   89      | EQ
   90      | NEQ

   91 valeur: CONSTANTE
   92       | IDENTIFICATEUR

   93 returne: RETURN expression ';'
   94        | RETURN ';'
   95        | %empty


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 4 11 31 49 53 54 57 62 68
    ')' (41) 4 11 31 49 53 54 57 62 68
    ',' (44) 12 17 69
    ':' (58) 55 56
    ';' (59) 11 23 31 33 37 57 93 94
    '=' (61) 40 46
    '[' (91) 22 60
    ']' (93) 22 60
    '{' (123) 4
    '}' (125) 4
    error (256)
    VOID (258) 25
    EXTERN <nd_obj> (259) 11
    INT <nd_obj> (260) 16 24
    CHAR <nd_obj> (261)
    FOR <nd_obj> (262) 31
    WHILE <nd_obj> (263)
    SWITCH <nd_obj> (264) 54
    CASE <nd_obj> (265) 55
    DEFAULT <nd_obj> (266) 56
    BREAK <nd_obj> (267) 37
    THEN <nd_obj> (268)
    IF <nd_obj> (269) 49 53
    ELSE <nd_obj> (270) 53
    TRUE <nd_obj> (271) 76
    FALSE <nd_obj> (272) 77
    CONSTANTE <nd_obj> (273) 22 55 66 91
    IDENTIFICATEUR <nd_obj> (274) 7 11 16 20 40 42 44 45 57 58 61 68 92
    LEQ <nd_obj> (275) 87
    GEQ <nd_obj> (276) 88
    EQ <nd_obj> (277) 89
    NOT <nd_obj> (278)
    GT <nd_obj> (279) 86
    LT <nd_obj> (280) 85
    LAND <nd_obj> (281)
    LOR <nd_obj> (282)
    NEQ <nd_obj> (283) 90
    STR <nd_obj> (284)
    PLUS <nd_obj> (285) 71 81
    MUL <nd_obj> (286) 73 83
    DIV <nd_obj> (287) 74 84
    MOINS <nd_obj> (288) 64 72 82
    UNARY <nd_obj> (289) 44 45
    INCLUDE <nd_obj> (290)
    RETURN <nd_obj> (291) 93 94
    OP (292)


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    programme1 <nd_obj> (49)
        on left: 1
        on right: 0
    liste_fonctions <nd_obj> (50)
        on left: 2 3
        on right: 1 2
    fonction <nd_obj> (51)
        on left: 4 5
        on right: 2 3
    nom_fonction <nd_obj> (52)
        on left: 7
        on right: 4
    $@1 (53)
        on left: 6
        on right: 7
    externs <nd_obj> (54)
        on left: 8 9
        on right: 5 8
    externe <nd_obj> (55)
        on left: 11
        on right: 8 9
    $@2 (56)
        on left: 10
        on right: 11
    liste_parms (57)
        on left: 12 13 14
        on right: 11 12
    parm (58)
        on left: 16
        on right: 12 13
    $@3 (59)
        on left: 15
        on right: 16
    liste_declarateurs <nd_obj> (60)
        on left: 17 18 19
        on right: 17 23
    declarateur <nd_obj> (61)
        on left: 20 22
        on right: 17 18 19 22
    $@4 (62)
        on left: 21
        on right: 22
    declaration <nd_obj> (63)
        on left: 23
        on right: 35
    datatype <nd_obj> (64)
        on left: 24 25
        on right: 7 11 23
    liste_instructions <nd_obj> (65)
        on left: 26 27 28
        on right: 4 26
    instruction <nd_obj> (66)
        on left: 29 31 32 33 34 35 36 37
        on right: 26 27 31 49 53 54 55 56
    $@5 (67)
        on left: 30
        on right: 31
    instruction1 <nd_obj> (68)
        on left: 38 40 42 44 45
        on right: 31 33
    $@6 (69)
        on left: 39
        on right: 40
    $@7 (70)
        on left: 41
        on right: 42
    $@8 (71)
        on left: 43
        on right: 44
    init <nd_obj2> (72)
        on left: 46
        on right: 19
    selection <nd_obj> (73)
        on left: 49 53 54 55 56
        on right: 32
    $@9 (74)
        on left: 47
        on right: 49
    $@10 (75)
        on left: 48
        on right: 49
    $@11 (76)
        on left: 50
        on right: 53
    $@12 (77)
        on left: 51
        on right: 53
    $@13 (78)
        on left: 52
        on right: 53
    appel <nd_obj> (79)
        on left: 57
        on right: 34
    variable <nd_obj2> (80)
        on left: 58 59
        on right: 67
    tableu <nd_obj> (81)
        on left: 60 61
        on right: 59 60
    expression <nd_obj2> (82)
        on left: 62 63 64 66 67 68 79 80
        on right: 40 42 54 60 62 63 64 69 70 75 79 93
    $@14 (83)
        on left: 65
        on right: 66
    liste_expressions <nd_obj> (84)
        on left: 69 70
        on right: 57 68 69
    binary_op <nd_obj> (85)
        on left: 71 72 73 74
        on right: 63
    condition <nd_obj3> (86)
        on left: 75 76 77 78
        on right: 31 49 53
    arithmetic <nd_obj> (87)
        on left: 81 82 83 84
        on right: 79
    relop <nd_obj> (88)
        on left: 85 86 87 88 89 90
        on right: 42 75
    valeur <nd_obj2> (89)
        on left: 91 92
        on right: 46 80
    returne <nd_obj> (90)
        on left: 93 94 95
        on right: 36


State 0

    0 $accept: . programme1 $end

    VOID    shift, and go to state 1
    EXTERN  shift, and go to state 2
    INT     shift, and go to state 3

    programme1       go to state 4
    liste_fonctions  go to state 5
    fonction         go to state 6
    nom_fonction     go to state 7
    externs          go to state 8
    externe          go to state 9
    datatype         go to state 10


State 1

   25 datatype: VOID .

    $default  reduce using rule 25 (datatype)


State 2

   11 externe: EXTERN . datatype IDENTIFICATEUR $@2 '(' liste_parms ')' ';'

    VOID  shift, and go to state 1
    INT   shift, and go to state 3

    datatype  go to state 11


State 3

   24 datatype: INT .

    $default  reduce using rule 24 (datatype)


State 4

    0 $accept: programme1 . $end

    $end  shift, and go to state 12


State 5

    1 programme1: liste_fonctions .
    2 liste_fonctions: liste_fonctions . fonction

    VOID    shift, and go to state 1
    EXTERN  shift, and go to state 2
    INT     shift, and go to state 3

    $default  reduce using rule 1 (programme1)

    fonction      go to state 13
    nom_fonction  go to state 7
    externs       go to state 8
    externe       go to state 9
    datatype      go to state 10


State 6

    3 liste_fonctions: fonction .

    $default  reduce using rule 3 (liste_fonctions)


State 7

    4 fonction: nom_fonction . '(' ')' '{' liste_instructions '}'

    '('  shift, and go to state 14


State 8

    5 fonction: externs .
    8 externs: externs . externe

    EXTERN  shift, and go to state 2

    EXTERN    [reduce using rule 5 (fonction)]
    $default  reduce using rule 5 (fonction)

    externe  go to state 15


State 9

    9 externs: externe .

    $default  reduce using rule 9 (externs)


State 10

    7 nom_fonction: datatype . IDENTIFICATEUR $@1

    IDENTIFICATEUR  shift, and go to state 16


State 11

   11 externe: EXTERN datatype . IDENTIFICATEUR $@2 '(' liste_parms ')' ';'

    IDENTIFICATEUR  shift, and go to state 17


State 12

    0 $accept: programme1 $end .

    $default  accept


State 13

    2 liste_fonctions: liste_fonctions fonction .

    $default  reduce using rule 2 (liste_fonctions)


State 14

    4 fonction: nom_fonction '(' . ')' '{' liste_instructions '}'

    ')'  shift, and go to state 18


State 15

    8 externs: externs externe .

    $default  reduce using rule 8 (externs)


State 16

    7 nom_fonction: datatype IDENTIFICATEUR . $@1

    $default  reduce using rule 6 ($@1)

    $@1  go to state 19


State 17

   11 externe: EXTERN datatype IDENTIFICATEUR . $@2 '(' liste_parms ')' ';'

    $default  reduce using rule 10 ($@2)

    $@2  go to state 20


State 18

    4 fonction: nom_fonction '(' ')' . '{' liste_instructions '}'

    '{'  shift, and go to state 21


State 19

    7 nom_fonction: datatype IDENTIFICATEUR $@1 .

    $default  reduce using rule 7 (nom_fonction)


State 20

   11 externe: EXTERN datatype IDENTIFICATEUR $@2 . '(' liste_parms ')' ';'

    '('  shift, and go to state 22


State 21

    4 fonction: nom_fonction '(' ')' '{' . liste_instructions '}'

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 23
    SWITCH          shift, and go to state 24
    CASE            shift, and go to state 25
    DEFAULT         shift, and go to state 26
    BREAK           shift, and go to state 27
    IF              shift, and go to state 28
    IDENTIFICATEUR  shift, and go to state 29
    UNARY           shift, and go to state 30
    RETURN          shift, and go to state 31

    VOID            [reduce using rule 29 (instruction)]
    VOID            [reduce using rule 95 (returne)]
    INT             [reduce using rule 29 (instruction)]
    INT             [reduce using rule 95 (returne)]
    FOR             [reduce using rule 29 (instruction)]
    FOR             [reduce using rule 95 (returne)]
    SWITCH          [reduce using rule 29 (instruction)]
    SWITCH          [reduce using rule 95 (returne)]
    CASE            [reduce using rule 29 (instruction)]
    CASE            [reduce using rule 95 (returne)]
    DEFAULT         [reduce using rule 29 (instruction)]
    DEFAULT         [reduce using rule 95 (returne)]
    BREAK           [reduce using rule 29 (instruction)]
    BREAK           [reduce using rule 95 (returne)]
    IF              [reduce using rule 29 (instruction)]
    IF              [reduce using rule 95 (returne)]
    IDENTIFICATEUR  [reduce using rule 29 (instruction)]
    IDENTIFICATEUR  [reduce using rule 95 (returne)]
    UNARY           [reduce using rule 29 (instruction)]
    UNARY           [reduce using rule 95 (returne)]
    RETURN          [reduce using rule 29 (instruction)]
    RETURN          [reduce using rule 95 (returne)]
    '}'             reduce using rule 28 (liste_instructions)
    '}'             [reduce using rule 29 (instruction)]
    '}'             [reduce using rule 95 (returne)]
    ';'             reduce using rule 29 (instruction)
    ';'             [reduce using rule 38 (instruction1)]
    ';'             [reduce using rule 95 (returne)]
    $default        reduce using rule 28 (liste_instructions)

    declaration         go to state 32
    datatype            go to state 33
    liste_instructions  go to state 34
    instruction         go to state 35
    instruction1        go to state 36
    selection           go to state 37
    appel               go to state 38
    returne             go to state 39


State 22

   11 externe: EXTERN datatype IDENTIFICATEUR $@2 '(' . liste_parms ')' ';'

    INT  shift, and go to state 40

    $default  reduce using rule 14 (liste_parms)

    liste_parms  go to state 41
    parm         go to state 42


State 23

   31 instruction: FOR . $@5 '(' instruction1 ';' condition ';' instruction1 ')' instruction

    $default  reduce using rule 30 ($@5)

    $@5  go to state 43


State 24

   54 selection: SWITCH . '(' expression ')' instruction

    '('  shift, and go to state 44


State 25

   55 selection: CASE . CONSTANTE ':' instruction

    CONSTANTE  shift, and go to state 45


State 26

   56 selection: DEFAULT . ':' instruction

    ':'  shift, and go to state 46


State 27

   37 instruction: BREAK . ';'

    ';'  shift, and go to state 47


State 28

   49 selection: IF . $@9 '(' condition ')' $@10 instruction
   53          | IF . $@11 '(' condition ')' $@12 instruction $@13 ELSE instruction

    '('       reduce using rule 47 ($@9)
    '('       [reduce using rule 50 ($@11)]
    $default  reduce using rule 47 ($@9)

    $@9   go to state 48
    $@11  go to state 49


State 29

   40 instruction1: IDENTIFICATEUR . $@6 '=' expression
   42             | IDENTIFICATEUR . $@7 relop expression
   44             | IDENTIFICATEUR . $@8 UNARY
   57 appel: IDENTIFICATEUR . '(' liste_expressions ')' ';'

    '('  shift, and go to state 50

    UNARY     reduce using rule 43 ($@8)
    '='       reduce using rule 39 ($@6)
    $default  reduce using rule 41 ($@7)

    $@6  go to state 51
    $@7  go to state 52
    $@8  go to state 53


State 30

   45 instruction1: UNARY . IDENTIFICATEUR

    IDENTIFICATEUR  shift, and go to state 54


State 31

   93 returne: RETURN . expression ';'
   94        | RETURN . ';'

    CONSTANTE       shift, and go to state 55
    IDENTIFICATEUR  shift, and go to state 56
    MOINS           shift, and go to state 57
    '('             shift, and go to state 58
    ';'             shift, and go to state 59

    variable    go to state 60
    tableu      go to state 61
    expression  go to state 62
    valeur      go to state 63


State 32

   35 instruction: declaration .

    $default  reduce using rule 35 (instruction)


State 33

   23 declaration: datatype . liste_declarateurs ';'

    IDENTIFICATEUR  shift, and go to state 64

    liste_declarateurs  go to state 65
    declarateur         go to state 66


State 34

    4 fonction: nom_fonction '(' ')' '{' liste_instructions . '}'

    '}'  shift, and go to state 67


State 35

   26 liste_instructions: instruction . liste_instructions
   27                   | instruction .

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 23
    SWITCH          shift, and go to state 24
    CASE            shift, and go to state 25
    DEFAULT         shift, and go to state 26
    BREAK           shift, and go to state 27
    IF              shift, and go to state 28
    IDENTIFICATEUR  shift, and go to state 29
    UNARY           shift, and go to state 30
    RETURN          shift, and go to state 31

    VOID            [reduce using rule 29 (instruction)]
    VOID            [reduce using rule 95 (returne)]
    INT             [reduce using rule 29 (instruction)]
    INT             [reduce using rule 95 (returne)]
    FOR             [reduce using rule 29 (instruction)]
    FOR             [reduce using rule 95 (returne)]
    SWITCH          [reduce using rule 29 (instruction)]
    SWITCH          [reduce using rule 95 (returne)]
    CASE            [reduce using rule 29 (instruction)]
    CASE            [reduce using rule 95 (returne)]
    DEFAULT         [reduce using rule 29 (instruction)]
    DEFAULT         [reduce using rule 95 (returne)]
    BREAK           [reduce using rule 29 (instruction)]
    BREAK           [reduce using rule 95 (returne)]
    IF              [reduce using rule 29 (instruction)]
    IF              [reduce using rule 95 (returne)]
    IDENTIFICATEUR  [reduce using rule 29 (instruction)]
    IDENTIFICATEUR  [reduce using rule 95 (returne)]
    UNARY           [reduce using rule 29 (instruction)]
    UNARY           [reduce using rule 95 (returne)]
    RETURN          [reduce using rule 29 (instruction)]
    RETURN          [reduce using rule 95 (returne)]
    '}'             reduce using rule 27 (liste_instructions)
    '}'             [reduce using rule 28 (liste_instructions)]
    '}'             [reduce using rule 29 (instruction)]
    '}'             [reduce using rule 95 (returne)]
    ';'             reduce using rule 29 (instruction)
    ';'             [reduce using rule 38 (instruction1)]
    ';'             [reduce using rule 95 (returne)]
    $default        reduce using rule 27 (liste_instructions)

    declaration         go to state 32
    datatype            go to state 33
    liste_instructions  go to state 68
    instruction         go to state 35
    instruction1        go to state 36
    selection           go to state 37
    appel               go to state 38
    returne             go to state 39


State 36

   33 instruction: instruction1 . ';'

    ';'  shift, and go to state 69


State 37

   32 instruction: selection .

    $default  reduce using rule 32 (instruction)


State 38

   34 instruction: appel .

    $default  reduce using rule 34 (instruction)


State 39

   36 instruction: returne .

    $default  reduce using rule 36 (instruction)


State 40

   16 parm: INT . $@3 IDENTIFICATEUR

    $default  reduce using rule 15 ($@3)

    $@3  go to state 70


State 41

   11 externe: EXTERN datatype IDENTIFICATEUR $@2 '(' liste_parms . ')' ';'
   12 liste_parms: liste_parms . ',' parm

    ')'  shift, and go to state 71
    ','  shift, and go to state 72


State 42

   13 liste_parms: parm .

    $default  reduce using rule 13 (liste_parms)


State 43

   31 instruction: FOR $@5 . '(' instruction1 ';' condition ';' instruction1 ')' instruction

    '('  shift, and go to state 73


State 44

   54 selection: SWITCH '(' . expression ')' instruction

    CONSTANTE       shift, and go to state 55
    IDENTIFICATEUR  shift, and go to state 56
    MOINS           shift, and go to state 57
    '('             shift, and go to state 58

    variable    go to state 60
    tableu      go to state 61
    expression  go to state 74
    valeur      go to state 63


State 45

   55 selection: CASE CONSTANTE . ':' instruction

    ':'  shift, and go to state 75


State 46

   56 selection: DEFAULT ':' . instruction

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 23
    SWITCH          shift, and go to state 24
    CASE            shift, and go to state 25
    DEFAULT         shift, and go to state 26
    BREAK           shift, and go to state 27
    IF              shift, and go to state 28
    IDENTIFICATEUR  shift, and go to state 29
    UNARY           shift, and go to state 30
    RETURN          shift, and go to state 31

    VOID            [reduce using rule 29 (instruction)]
    VOID            [reduce using rule 95 (returne)]
    INT             [reduce using rule 29 (instruction)]
    INT             [reduce using rule 95 (returne)]
    FOR             [reduce using rule 29 (instruction)]
    FOR             [reduce using rule 95 (returne)]
    SWITCH          [reduce using rule 29 (instruction)]
    SWITCH          [reduce using rule 95 (returne)]
    CASE            [reduce using rule 29 (instruction)]
    CASE            [reduce using rule 95 (returne)]
    DEFAULT         [reduce using rule 29 (instruction)]
    DEFAULT         [reduce using rule 95 (returne)]
    BREAK           [reduce using rule 29 (instruction)]
    BREAK           [reduce using rule 95 (returne)]
    IF              [reduce using rule 29 (instruction)]
    IF              [reduce using rule 95 (returne)]
    ELSE            reduce using rule 29 (instruction)
    ELSE            [reduce using rule 95 (returne)]
    IDENTIFICATEUR  [reduce using rule 29 (instruction)]
    IDENTIFICATEUR  [reduce using rule 95 (returne)]
    UNARY           [reduce using rule 29 (instruction)]
    UNARY           [reduce using rule 95 (returne)]
    RETURN          [reduce using rule 29 (instruction)]
    RETURN          [reduce using rule 95 (returne)]
    '}'             reduce using rule 29 (instruction)
    '}'             [reduce using rule 95 (returne)]
    ';'             reduce using rule 29 (instruction)
    ';'             [reduce using rule 38 (instruction1)]
    ';'             [reduce using rule 95 (returne)]
    $default        reduce using rule 29 (instruction)

    declaration   go to state 32
    datatype      go to state 33
    instruction   go to state 76
    instruction1  go to state 36
    selection     go to state 37
    appel         go to state 38
    returne       go to state 39


State 47

   37 instruction: BREAK ';' .

    $default  reduce using rule 37 (instruction)


State 48

   49 selection: IF $@9 . '(' condition ')' $@10 instruction

    '('  shift, and go to state 77


State 49

   53 selection: IF $@11 . '(' condition ')' $@12 instruction $@13 ELSE instruction

    '('  shift, and go to state 78


State 50

   57 appel: IDENTIFICATEUR '(' . liste_expressions ')' ';'

    CONSTANTE       shift, and go to state 55
    IDENTIFICATEUR  shift, and go to state 56
    MOINS           shift, and go to state 57
    '('             shift, and go to state 58

    variable           go to state 60
    tableu             go to state 61
    expression         go to state 79
    liste_expressions  go to state 80
    valeur             go to state 63


State 51

   40 instruction1: IDENTIFICATEUR $@6 . '=' expression

    '='  shift, and go to state 81


State 52

   42 instruction1: IDENTIFICATEUR $@7 . relop expression

    LEQ  shift, and go to state 82
    GEQ  shift, and go to state 83
    EQ   shift, and go to state 84
    GT   shift, and go to state 85
    LT   shift, and go to state 86
    NEQ  shift, and go to state 87

    relop  go to state 88


State 53

   44 instruction1: IDENTIFICATEUR $@8 . UNARY

    UNARY  shift, and go to state 89


State 54

   45 instruction1: UNARY IDENTIFICATEUR .

    $default  reduce using rule 45 (instruction1)


State 55

   66 expression: CONSTANTE . $@14
   91 valeur: CONSTANTE .

    LEQ       reduce using rule 65 ($@14)
    LEQ       [reduce using rule 91 (valeur)]
    GEQ       reduce using rule 65 ($@14)
    GEQ       [reduce using rule 91 (valeur)]
    EQ        reduce using rule 65 ($@14)
    EQ        [reduce using rule 91 (valeur)]
    GT        reduce using rule 65 ($@14)
    GT        [reduce using rule 91 (valeur)]
    LT        reduce using rule 65 ($@14)
    LT        [reduce using rule 91 (valeur)]
    NEQ       reduce using rule 65 ($@14)
    NEQ       [reduce using rule 91 (valeur)]
    PLUS      reduce using rule 65 ($@14)
    PLUS      [reduce using rule 91 (valeur)]
    MUL       reduce using rule 65 ($@14)
    MUL       [reduce using rule 91 (valeur)]
    DIV       reduce using rule 65 ($@14)
    DIV       [reduce using rule 91 (valeur)]
    MOINS     reduce using rule 65 ($@14)
    MOINS     [reduce using rule 91 (valeur)]
    ')'       reduce using rule 65 ($@14)
    ')'       [reduce using rule 91 (valeur)]
    ';'       reduce using rule 65 ($@14)
    ';'       [reduce using rule 91 (valeur)]
    ','       reduce using rule 65 ($@14)
    ','       [reduce using rule 91 (valeur)]
    ']'       reduce using rule 65 ($@14)
    ']'       [reduce using rule 91 (valeur)]
    $default  reduce using rule 65 ($@14)

    $@14  go to state 90


State 56

   58 variable: IDENTIFICATEUR .
   61 tableu: IDENTIFICATEUR .
   68 expression: IDENTIFICATEUR . '(' liste_expressions ')'
   92 valeur: IDENTIFICATEUR .

    '('  shift, and go to state 91

    LEQ       reduce using rule 58 (variable)
    LEQ       [reduce using rule 61 (tableu)]
    LEQ       [reduce using rule 92 (valeur)]
    GEQ       reduce using rule 58 (variable)
    GEQ       [reduce using rule 61 (tableu)]
    GEQ       [reduce using rule 92 (valeur)]
    EQ        reduce using rule 58 (variable)
    EQ        [reduce using rule 61 (tableu)]
    EQ        [reduce using rule 92 (valeur)]
    GT        reduce using rule 58 (variable)
    GT        [reduce using rule 61 (tableu)]
    GT        [reduce using rule 92 (valeur)]
    LT        reduce using rule 58 (variable)
    LT        [reduce using rule 61 (tableu)]
    LT        [reduce using rule 92 (valeur)]
    NEQ       reduce using rule 58 (variable)
    NEQ       [reduce using rule 61 (tableu)]
    NEQ       [reduce using rule 92 (valeur)]
    PLUS      reduce using rule 58 (variable)
    PLUS      [reduce using rule 61 (tableu)]
    PLUS      [reduce using rule 92 (valeur)]
    MUL       reduce using rule 58 (variable)
    MUL       [reduce using rule 61 (tableu)]
    MUL       [reduce using rule 92 (valeur)]
    DIV       reduce using rule 58 (variable)
    DIV       [reduce using rule 61 (tableu)]
    DIV       [reduce using rule 92 (valeur)]
    MOINS     reduce using rule 58 (variable)
    MOINS     [reduce using rule 61 (tableu)]
    MOINS     [reduce using rule 92 (valeur)]
    ')'       reduce using rule 58 (variable)
    ')'       [reduce using rule 61 (tableu)]
    ')'       [reduce using rule 92 (valeur)]
    ';'       reduce using rule 58 (variable)
    ';'       [reduce using rule 61 (tableu)]
    ';'       [reduce using rule 92 (valeur)]
    ','       reduce using rule 58 (variable)
    ','       [reduce using rule 61 (tableu)]
    ','       [reduce using rule 92 (valeur)]
    '['       reduce using rule 61 (tableu)
    ']'       reduce using rule 58 (variable)
    ']'       [reduce using rule 61 (tableu)]
    ']'       [reduce using rule 92 (valeur)]
    $default  reduce using rule 58 (variable)


State 57

   64 expression: MOINS . expression

    CONSTANTE       shift, and go to state 55
    IDENTIFICATEUR  shift, and go to state 56
    MOINS           shift, and go to state 57
    '('             shift, and go to state 58

    variable    go to state 60
    tableu      go to state 61
    expression  go to state 92
    valeur      go to state 63


State 58

   62 expression: '(' . expression ')'

    CONSTANTE       shift, and go to state 55
    IDENTIFICATEUR  shift, and go to state 56
    MOINS           shift, and go to state 57
    '('             shift, and go to state 58

    variable    go to state 60
    tableu      go to state 61
    expression  go to state 93
    valeur      go to state 63


State 59

   94 returne: RETURN ';' .

    $default  reduce using rule 94 (returne)


State 60

   67 expression: variable .

    $default  reduce using rule 67 (expression)


State 61

   59 variable: tableu .
   60 tableu: tableu . '[' expression ']'

    '['  shift, and go to state 94

    $default  reduce using rule 59 (variable)


State 62

   63 expression: expression . binary_op expression
   79           | expression . arithmetic expression
   93 returne: RETURN expression . ';'

    PLUS   shift, and go to state 95
    MUL    shift, and go to state 96
    DIV    shift, and go to state 97
    MOINS  shift, and go to state 98
    ';'    shift, and go to state 99

    binary_op   go to state 100
    arithmetic  go to state 101


State 63

   80 expression: valeur .

    $default  reduce using rule 80 (expression)


State 64

   20 declarateur: IDENTIFICATEUR .

    $default  reduce using rule 20 (declarateur)


State 65

   23 declaration: datatype liste_declarateurs . ';'

    ';'  shift, and go to state 102


State 66

   17 liste_declarateurs: declarateur . ',' liste_declarateurs
   18                   | declarateur .
   19                   | declarateur . init
   22 declarateur: declarateur . '[' CONSTANTE $@4 ']'

    ','  shift, and go to state 103
    '['  shift, and go to state 104
    '='  shift, and go to state 105

    $default  reduce using rule 18 (liste_declarateurs)

    init  go to state 106


State 67

    4 fonction: nom_fonction '(' ')' '{' liste_instructions '}' .

    $default  reduce using rule 4 (fonction)


State 68

   26 liste_instructions: instruction liste_instructions .

    $default  reduce using rule 26 (liste_instructions)


State 69

   33 instruction: instruction1 ';' .

    $default  reduce using rule 33 (instruction)


State 70

   16 parm: INT $@3 . IDENTIFICATEUR

    IDENTIFICATEUR  shift, and go to state 107


State 71

   11 externe: EXTERN datatype IDENTIFICATEUR $@2 '(' liste_parms ')' . ';'

    ';'  shift, and go to state 108


State 72

   12 liste_parms: liste_parms ',' . parm

    INT  shift, and go to state 40

    parm  go to state 109


State 73

   31 instruction: FOR $@5 '(' . instruction1 ';' condition ';' instruction1 ')' instruction

    IDENTIFICATEUR  shift, and go to state 110
    UNARY           shift, and go to state 30

    $default  reduce using rule 38 (instruction1)

    instruction1  go to state 111


State 74

   54 selection: SWITCH '(' expression . ')' instruction
   63 expression: expression . binary_op expression
   79           | expression . arithmetic expression

    PLUS   shift, and go to state 95
    MUL    shift, and go to state 96
    DIV    shift, and go to state 97
    MOINS  shift, and go to state 98
    ')'    shift, and go to state 112

    binary_op   go to state 100
    arithmetic  go to state 101


State 75

   55 selection: CASE CONSTANTE ':' . instruction

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 23
    SWITCH          shift, and go to state 24
    CASE            shift, and go to state 25
    DEFAULT         shift, and go to state 26
    BREAK           shift, and go to state 27
    IF              shift, and go to state 28
    IDENTIFICATEUR  shift, and go to state 29
    UNARY           shift, and go to state 30
    RETURN          shift, and go to state 31

    VOID            [reduce using rule 29 (instruction)]
    VOID            [reduce using rule 95 (returne)]
    INT             [reduce using rule 29 (instruction)]
    INT             [reduce using rule 95 (returne)]
    FOR             [reduce using rule 29 (instruction)]
    FOR             [reduce using rule 95 (returne)]
    SWITCH          [reduce using rule 29 (instruction)]
    SWITCH          [reduce using rule 95 (returne)]
    CASE            [reduce using rule 29 (instruction)]
    CASE            [reduce using rule 95 (returne)]
    DEFAULT         [reduce using rule 29 (instruction)]
    DEFAULT         [reduce using rule 95 (returne)]
    BREAK           [reduce using rule 29 (instruction)]
    BREAK           [reduce using rule 95 (returne)]
    IF              [reduce using rule 29 (instruction)]
    IF              [reduce using rule 95 (returne)]
    ELSE            reduce using rule 29 (instruction)
    ELSE            [reduce using rule 95 (returne)]
    IDENTIFICATEUR  [reduce using rule 29 (instruction)]
    IDENTIFICATEUR  [reduce using rule 95 (returne)]
    UNARY           [reduce using rule 29 (instruction)]
    UNARY           [reduce using rule 95 (returne)]
    RETURN          [reduce using rule 29 (instruction)]
    RETURN          [reduce using rule 95 (returne)]
    '}'             reduce using rule 29 (instruction)
    '}'             [reduce using rule 95 (returne)]
    ';'             reduce using rule 29 (instruction)
    ';'             [reduce using rule 38 (instruction1)]
    ';'             [reduce using rule 95 (returne)]
    $default        reduce using rule 29 (instruction)

    declaration   go to state 32
    datatype      go to state 33
    instruction   go to state 113
    instruction1  go to state 36
    selection     go to state 37
    appel         go to state 38
    returne       go to state 39


State 76

   56 selection: DEFAULT ':' instruction .

    $default  reduce using rule 56 (selection)


State 77

   49 selection: IF $@9 '(' . condition ')' $@10 instruction

    TRUE            shift, and go to state 114
    FALSE           shift, and go to state 115
    CONSTANTE       shift, and go to state 55
    IDENTIFICATEUR  shift, and go to state 56
    MOINS           shift, and go to state 57
    '('             shift, and go to state 58

    $default  reduce using rule 78 (condition)

    variable    go to state 60
    tableu      go to state 61
    expression  go to state 116
    condition   go to state 117
    valeur      go to state 63


State 78

   53 selection: IF $@11 '(' . condition ')' $@12 instruction $@13 ELSE instruction

    TRUE            shift, and go to state 114
    FALSE           shift, and go to state 115
    CONSTANTE       shift, and go to state 55
    IDENTIFICATEUR  shift, and go to state 56
    MOINS           shift, and go to state 57
    '('             shift, and go to state 58

    $default  reduce using rule 78 (condition)

    variable    go to state 60
    tableu      go to state 61
    expression  go to state 116
    condition   go to state 118
    valeur      go to state 63


State 79

   63 expression: expression . binary_op expression
   70 liste_expressions: expression .
   79 expression: expression . arithmetic expression

    PLUS   shift, and go to state 95
    MUL    shift, and go to state 96
    DIV    shift, and go to state 97
    MOINS  shift, and go to state 98

    $default  reduce using rule 70 (liste_expressions)

    binary_op   go to state 100
    arithmetic  go to state 101


State 80

   57 appel: IDENTIFICATEUR '(' liste_expressions . ')' ';'
   69 liste_expressions: liste_expressions . ',' expression

    ')'  shift, and go to state 119
    ','  shift, and go to state 120


State 81

   40 instruction1: IDENTIFICATEUR $@6 '=' . expression

    CONSTANTE       shift, and go to state 55
    IDENTIFICATEUR  shift, and go to state 56
    MOINS           shift, and go to state 57
    '('             shift, and go to state 58

    variable    go to state 60
    tableu      go to state 61
    expression  go to state 121
    valeur      go to state 63


State 82

   87 relop: LEQ .

    $default  reduce using rule 87 (relop)


State 83

   88 relop: GEQ .

    $default  reduce using rule 88 (relop)


State 84

   89 relop: EQ .

    $default  reduce using rule 89 (relop)


State 85

   86 relop: GT .

    $default  reduce using rule 86 (relop)


State 86

   85 relop: LT .

    $default  reduce using rule 85 (relop)


State 87

   90 relop: NEQ .

    $default  reduce using rule 90 (relop)


State 88

   42 instruction1: IDENTIFICATEUR $@7 relop . expression

    CONSTANTE       shift, and go to state 55
    IDENTIFICATEUR  shift, and go to state 56
    MOINS           shift, and go to state 57
    '('             shift, and go to state 58

    variable    go to state 60
    tableu      go to state 61
    expression  go to state 122
    valeur      go to state 63


State 89

   44 instruction1: IDENTIFICATEUR $@8 UNARY .

    $default  reduce using rule 44 (instruction1)


State 90

   66 expression: CONSTANTE $@14 .

    $default  reduce using rule 66 (expression)


State 91

   68 expression: IDENTIFICATEUR '(' . liste_expressions ')'

    CONSTANTE       shift, and go to state 55
    IDENTIFICATEUR  shift, and go to state 56
    MOINS           shift, and go to state 57
    '('             shift, and go to state 58

    variable           go to state 60
    tableu             go to state 61
    expression         go to state 79
    liste_expressions  go to state 123
    valeur             go to state 63


State 92

   63 expression: expression . binary_op expression
   64           | MOINS expression .
   79           | expression . arithmetic expression

    PLUS   shift, and go to state 95
    MUL    shift, and go to state 96
    DIV    shift, and go to state 97
    MOINS  shift, and go to state 98

    PLUS      [reduce using rule 64 (expression)]
    MUL       [reduce using rule 64 (expression)]
    DIV       [reduce using rule 64 (expression)]
    MOINS     [reduce using rule 64 (expression)]
    $default  reduce using rule 64 (expression)

    binary_op   go to state 100
    arithmetic  go to state 101


State 93

   62 expression: '(' expression . ')'
   63           | expression . binary_op expression
   79           | expression . arithmetic expression

    PLUS   shift, and go to state 95
    MUL    shift, and go to state 96
    DIV    shift, and go to state 97
    MOINS  shift, and go to state 98
    ')'    shift, and go to state 124

    binary_op   go to state 100
    arithmetic  go to state 101


State 94

   60 tableu: tableu '[' . expression ']'

    CONSTANTE       shift, and go to state 55
    IDENTIFICATEUR  shift, and go to state 56
    MOINS           shift, and go to state 57
    '('             shift, and go to state 58

    variable    go to state 60
    tableu      go to state 61
    expression  go to state 125
    valeur      go to state 63


State 95

   71 binary_op: PLUS .
   81 arithmetic: PLUS .

    CONSTANTE       reduce using rule 71 (binary_op)
    CONSTANTE       [reduce using rule 81 (arithmetic)]
    IDENTIFICATEUR  reduce using rule 71 (binary_op)
    IDENTIFICATEUR  [reduce using rule 81 (arithmetic)]
    MOINS           reduce using rule 71 (binary_op)
    MOINS           [reduce using rule 81 (arithmetic)]
    '('             reduce using rule 71 (binary_op)
    '('             [reduce using rule 81 (arithmetic)]
    $default        reduce using rule 71 (binary_op)


State 96

   73 binary_op: MUL .
   83 arithmetic: MUL .

    CONSTANTE       reduce using rule 73 (binary_op)
    CONSTANTE       [reduce using rule 83 (arithmetic)]
    IDENTIFICATEUR  reduce using rule 73 (binary_op)
    IDENTIFICATEUR  [reduce using rule 83 (arithmetic)]
    MOINS           reduce using rule 73 (binary_op)
    MOINS           [reduce using rule 83 (arithmetic)]
    '('             reduce using rule 73 (binary_op)
    '('             [reduce using rule 83 (arithmetic)]
    $default        reduce using rule 73 (binary_op)


State 97

   74 binary_op: DIV .
   84 arithmetic: DIV .

    CONSTANTE       reduce using rule 74 (binary_op)
    CONSTANTE       [reduce using rule 84 (arithmetic)]
    IDENTIFICATEUR  reduce using rule 74 (binary_op)
    IDENTIFICATEUR  [reduce using rule 84 (arithmetic)]
    MOINS           reduce using rule 74 (binary_op)
    MOINS           [reduce using rule 84 (arithmetic)]
    '('             reduce using rule 74 (binary_op)
    '('             [reduce using rule 84 (arithmetic)]
    $default        reduce using rule 74 (binary_op)


State 98

   72 binary_op: MOINS .
   82 arithmetic: MOINS .

    CONSTANTE       reduce using rule 72 (binary_op)
    CONSTANTE       [reduce using rule 82 (arithmetic)]
    IDENTIFICATEUR  reduce using rule 72 (binary_op)
    IDENTIFICATEUR  [reduce using rule 82 (arithmetic)]
    MOINS           reduce using rule 72 (binary_op)
    MOINS           [reduce using rule 82 (arithmetic)]
    '('             reduce using rule 72 (binary_op)
    '('             [reduce using rule 82 (arithmetic)]
    $default        reduce using rule 72 (binary_op)


State 99

   93 returne: RETURN expression ';' .

    $default  reduce using rule 93 (returne)


State 100

   63 expression: expression binary_op . expression

    CONSTANTE       shift, and go to state 55
    IDENTIFICATEUR  shift, and go to state 56
    MOINS           shift, and go to state 57
    '('             shift, and go to state 58

    variable    go to state 60
    tableu      go to state 61
    expression  go to state 126
    valeur      go to state 63


State 101

   79 expression: expression arithmetic . expression

    CONSTANTE       shift, and go to state 55
    IDENTIFICATEUR  shift, and go to state 56
    MOINS           shift, and go to state 57
    '('             shift, and go to state 58

    variable    go to state 60
    tableu      go to state 61
    expression  go to state 127
    valeur      go to state 63


State 102

   23 declaration: datatype liste_declarateurs ';' .

    $default  reduce using rule 23 (declaration)


State 103

   17 liste_declarateurs: declarateur ',' . liste_declarateurs

    IDENTIFICATEUR  shift, and go to state 64

    liste_declarateurs  go to state 128
    declarateur         go to state 66


State 104

   22 declarateur: declarateur '[' . CONSTANTE $@4 ']'

    CONSTANTE  shift, and go to state 129


State 105

   46 init: '=' . valeur

    CONSTANTE       shift, and go to state 130
    IDENTIFICATEUR  shift, and go to state 131

    valeur  go to state 132


State 106

   19 liste_declarateurs: declarateur init .

    $default  reduce using rule 19 (liste_declarateurs)


State 107

   16 parm: INT $@3 IDENTIFICATEUR .

    $default  reduce using rule 16 (parm)


State 108

   11 externe: EXTERN datatype IDENTIFICATEUR $@2 '(' liste_parms ')' ';' .

    $default  reduce using rule 11 (externe)


State 109

   12 liste_parms: liste_parms ',' parm .

    $default  reduce using rule 12 (liste_parms)


State 110

   40 instruction1: IDENTIFICATEUR . $@6 '=' expression
   42             | IDENTIFICATEUR . $@7 relop expression
   44             | IDENTIFICATEUR . $@8 UNARY

    UNARY     reduce using rule 43 ($@8)
    '='       reduce using rule 39 ($@6)
    $default  reduce using rule 41 ($@7)

    $@6  go to state 51
    $@7  go to state 52
    $@8  go to state 53


State 111

   31 instruction: FOR $@5 '(' instruction1 . ';' condition ';' instruction1 ')' instruction

    ';'  shift, and go to state 133


State 112

   54 selection: SWITCH '(' expression ')' . instruction

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 23
    SWITCH          shift, and go to state 24
    CASE            shift, and go to state 25
    DEFAULT         shift, and go to state 26
    BREAK           shift, and go to state 27
    IF              shift, and go to state 28
    IDENTIFICATEUR  shift, and go to state 29
    UNARY           shift, and go to state 30
    RETURN          shift, and go to state 31

    VOID            [reduce using rule 29 (instruction)]
    VOID            [reduce using rule 95 (returne)]
    INT             [reduce using rule 29 (instruction)]
    INT             [reduce using rule 95 (returne)]
    FOR             [reduce using rule 29 (instruction)]
    FOR             [reduce using rule 95 (returne)]
    SWITCH          [reduce using rule 29 (instruction)]
    SWITCH          [reduce using rule 95 (returne)]
    CASE            [reduce using rule 29 (instruction)]
    CASE            [reduce using rule 95 (returne)]
    DEFAULT         [reduce using rule 29 (instruction)]
    DEFAULT         [reduce using rule 95 (returne)]
    BREAK           [reduce using rule 29 (instruction)]
    BREAK           [reduce using rule 95 (returne)]
    IF              [reduce using rule 29 (instruction)]
    IF              [reduce using rule 95 (returne)]
    ELSE            reduce using rule 29 (instruction)
    ELSE            [reduce using rule 95 (returne)]
    IDENTIFICATEUR  [reduce using rule 29 (instruction)]
    IDENTIFICATEUR  [reduce using rule 95 (returne)]
    UNARY           [reduce using rule 29 (instruction)]
    UNARY           [reduce using rule 95 (returne)]
    RETURN          [reduce using rule 29 (instruction)]
    RETURN          [reduce using rule 95 (returne)]
    '}'             reduce using rule 29 (instruction)
    '}'             [reduce using rule 95 (returne)]
    ';'             reduce using rule 29 (instruction)
    ';'             [reduce using rule 38 (instruction1)]
    ';'             [reduce using rule 95 (returne)]
    $default        reduce using rule 29 (instruction)

    declaration   go to state 32
    datatype      go to state 33
    instruction   go to state 134
    instruction1  go to state 36
    selection     go to state 37
    appel         go to state 38
    returne       go to state 39


State 113

   55 selection: CASE CONSTANTE ':' instruction .

    $default  reduce using rule 55 (selection)


State 114

   76 condition: TRUE .

    $default  reduce using rule 76 (condition)


State 115

   77 condition: FALSE .

    $default  reduce using rule 77 (condition)


State 116

   63 expression: expression . binary_op expression
   75 condition: expression . relop expression
   79 expression: expression . arithmetic expression

    LEQ    shift, and go to state 82
    GEQ    shift, and go to state 83
    EQ     shift, and go to state 84
    GT     shift, and go to state 85
    LT     shift, and go to state 86
    NEQ    shift, and go to state 87
    PLUS   shift, and go to state 95
    MUL    shift, and go to state 96
    DIV    shift, and go to state 97
    MOINS  shift, and go to state 98

    binary_op   go to state 100
    arithmetic  go to state 101
    relop       go to state 135


State 117

   49 selection: IF $@9 '(' condition . ')' $@10 instruction

    ')'  shift, and go to state 136


State 118

   53 selection: IF $@11 '(' condition . ')' $@12 instruction $@13 ELSE instruction

    ')'  shift, and go to state 137


State 119

   57 appel: IDENTIFICATEUR '(' liste_expressions ')' . ';'

    ';'  shift, and go to state 138


State 120

   69 liste_expressions: liste_expressions ',' . expression

    CONSTANTE       shift, and go to state 55
    IDENTIFICATEUR  shift, and go to state 56
    MOINS           shift, and go to state 57
    '('             shift, and go to state 58

    variable    go to state 60
    tableu      go to state 61
    expression  go to state 139
    valeur      go to state 63


State 121

   40 instruction1: IDENTIFICATEUR $@6 '=' expression .
   63 expression: expression . binary_op expression
   79           | expression . arithmetic expression

    PLUS   shift, and go to state 95
    MUL    shift, and go to state 96
    DIV    shift, and go to state 97
    MOINS  shift, and go to state 98

    $default  reduce using rule 40 (instruction1)

    binary_op   go to state 100
    arithmetic  go to state 101


State 122

   42 instruction1: IDENTIFICATEUR $@7 relop expression .
   63 expression: expression . binary_op expression
   79           | expression . arithmetic expression

    PLUS   shift, and go to state 95
    MUL    shift, and go to state 96
    DIV    shift, and go to state 97
    MOINS  shift, and go to state 98

    $default  reduce using rule 42 (instruction1)

    binary_op   go to state 100
    arithmetic  go to state 101


State 123

   68 expression: IDENTIFICATEUR '(' liste_expressions . ')'
   69 liste_expressions: liste_expressions . ',' expression

    ')'  shift, and go to state 140
    ','  shift, and go to state 120


State 124

   62 expression: '(' expression ')' .

    $default  reduce using rule 62 (expression)


State 125

   60 tableu: tableu '[' expression . ']'
   63 expression: expression . binary_op expression
   79           | expression . arithmetic expression

    PLUS   shift, and go to state 95
    MUL    shift, and go to state 96
    DIV    shift, and go to state 97
    MOINS  shift, and go to state 98
    ']'    shift, and go to state 141

    binary_op   go to state 100
    arithmetic  go to state 101


State 126

   63 expression: expression . binary_op expression
   63           | expression binary_op expression .
   79           | expression . arithmetic expression

    PLUS   shift, and go to state 95
    MUL    shift, and go to state 96
    DIV    shift, and go to state 97
    MOINS  shift, and go to state 98

    PLUS      [reduce using rule 63 (expression)]
    MUL       [reduce using rule 63 (expression)]
    DIV       [reduce using rule 63 (expression)]
    MOINS     [reduce using rule 63 (expression)]
    $default  reduce using rule 63 (expression)

    binary_op   go to state 100
    arithmetic  go to state 101


State 127

   63 expression: expression . binary_op expression
   79           | expression . arithmetic expression
   79           | expression arithmetic expression .

    PLUS   shift, and go to state 95
    MUL    shift, and go to state 96
    DIV    shift, and go to state 97
    MOINS  shift, and go to state 98

    PLUS      [reduce using rule 79 (expression)]
    MUL       [reduce using rule 79 (expression)]
    DIV       [reduce using rule 79 (expression)]
    MOINS     [reduce using rule 79 (expression)]
    $default  reduce using rule 79 (expression)

    binary_op   go to state 100
    arithmetic  go to state 101


State 128

   17 liste_declarateurs: declarateur ',' liste_declarateurs .

    $default  reduce using rule 17 (liste_declarateurs)


State 129

   22 declarateur: declarateur '[' CONSTANTE . $@4 ']'

    $default  reduce using rule 21 ($@4)

    $@4  go to state 142


State 130

   91 valeur: CONSTANTE .

    $default  reduce using rule 91 (valeur)


State 131

   92 valeur: IDENTIFICATEUR .

    $default  reduce using rule 92 (valeur)


State 132

   46 init: '=' valeur .

    $default  reduce using rule 46 (init)


State 133

   31 instruction: FOR $@5 '(' instruction1 ';' . condition ';' instruction1 ')' instruction

    TRUE            shift, and go to state 114
    FALSE           shift, and go to state 115
    CONSTANTE       shift, and go to state 55
    IDENTIFICATEUR  shift, and go to state 56
    MOINS           shift, and go to state 57
    '('             shift, and go to state 58

    $default  reduce using rule 78 (condition)

    variable    go to state 60
    tableu      go to state 61
    expression  go to state 116
    condition   go to state 143
    valeur      go to state 63


State 134

   54 selection: SWITCH '(' expression ')' instruction .

    $default  reduce using rule 54 (selection)


State 135

   75 condition: expression relop . expression

    CONSTANTE       shift, and go to state 55
    IDENTIFICATEUR  shift, and go to state 56
    MOINS           shift, and go to state 57
    '('             shift, and go to state 58

    variable    go to state 60
    tableu      go to state 61
    expression  go to state 144
    valeur      go to state 63


State 136

   49 selection: IF $@9 '(' condition ')' . $@10 instruction

    $default  reduce using rule 48 ($@10)

    $@10  go to state 145


State 137

   53 selection: IF $@11 '(' condition ')' . $@12 instruction $@13 ELSE instruction

    $default  reduce using rule 51 ($@12)

    $@12  go to state 146


State 138

   57 appel: IDENTIFICATEUR '(' liste_expressions ')' ';' .

    $default  reduce using rule 57 (appel)


State 139

   63 expression: expression . binary_op expression
   69 liste_expressions: liste_expressions ',' expression .
   79 expression: expression . arithmetic expression

    PLUS   shift, and go to state 95
    MUL    shift, and go to state 96
    DIV    shift, and go to state 97
    MOINS  shift, and go to state 98

    $default  reduce using rule 69 (liste_expressions)

    binary_op   go to state 100
    arithmetic  go to state 101


State 140

   68 expression: IDENTIFICATEUR '(' liste_expressions ')' .

    $default  reduce using rule 68 (expression)


State 141

   60 tableu: tableu '[' expression ']' .

    $default  reduce using rule 60 (tableu)


State 142

   22 declarateur: declarateur '[' CONSTANTE $@4 . ']'

    ']'  shift, and go to state 147


State 143

   31 instruction: FOR $@5 '(' instruction1 ';' condition . ';' instruction1 ')' instruction

    ';'  shift, and go to state 148


State 144

   63 expression: expression . binary_op expression
   75 condition: expression relop expression .
   79 expression: expression . arithmetic expression

    PLUS   shift, and go to state 95
    MUL    shift, and go to state 96
    DIV    shift, and go to state 97
    MOINS  shift, and go to state 98

    $default  reduce using rule 75 (condition)

    binary_op   go to state 100
    arithmetic  go to state 101


State 145

   49 selection: IF $@9 '(' condition ')' $@10 . instruction

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 23
    SWITCH          shift, and go to state 24
    CASE            shift, and go to state 25
    DEFAULT         shift, and go to state 26
    BREAK           shift, and go to state 27
    IF              shift, and go to state 28
    IDENTIFICATEUR  shift, and go to state 29
    UNARY           shift, and go to state 30
    RETURN          shift, and go to state 31

    VOID            [reduce using rule 29 (instruction)]
    VOID            [reduce using rule 95 (returne)]
    INT             [reduce using rule 29 (instruction)]
    INT             [reduce using rule 95 (returne)]
    FOR             [reduce using rule 29 (instruction)]
    FOR             [reduce using rule 95 (returne)]
    SWITCH          [reduce using rule 29 (instruction)]
    SWITCH          [reduce using rule 95 (returne)]
    CASE            [reduce using rule 29 (instruction)]
    CASE            [reduce using rule 95 (returne)]
    DEFAULT         [reduce using rule 29 (instruction)]
    DEFAULT         [reduce using rule 95 (returne)]
    BREAK           [reduce using rule 29 (instruction)]
    BREAK           [reduce using rule 95 (returne)]
    IF              [reduce using rule 29 (instruction)]
    IF              [reduce using rule 95 (returne)]
    ELSE            reduce using rule 29 (instruction)
    ELSE            [reduce using rule 95 (returne)]
    IDENTIFICATEUR  [reduce using rule 29 (instruction)]
    IDENTIFICATEUR  [reduce using rule 95 (returne)]
    UNARY           [reduce using rule 29 (instruction)]
    UNARY           [reduce using rule 95 (returne)]
    RETURN          [reduce using rule 29 (instruction)]
    RETURN          [reduce using rule 95 (returne)]
    '}'             reduce using rule 29 (instruction)
    '}'             [reduce using rule 95 (returne)]
    ';'             reduce using rule 29 (instruction)
    ';'             [reduce using rule 38 (instruction1)]
    ';'             [reduce using rule 95 (returne)]
    $default        reduce using rule 29 (instruction)

    declaration   go to state 32
    datatype      go to state 33
    instruction   go to state 149
    instruction1  go to state 36
    selection     go to state 37
    appel         go to state 38
    returne       go to state 39


State 146

   53 selection: IF $@11 '(' condition ')' $@12 . instruction $@13 ELSE instruction

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 23
    SWITCH          shift, and go to state 24
    CASE            shift, and go to state 25
    DEFAULT         shift, and go to state 26
    BREAK           shift, and go to state 27
    IF              shift, and go to state 28
    IDENTIFICATEUR  shift, and go to state 29
    UNARY           shift, and go to state 30
    RETURN          shift, and go to state 31

    ELSE      reduce using rule 29 (instruction)
    ELSE      [reduce using rule 95 (returne)]
    ';'       reduce using rule 38 (instruction1)
    $default  reduce using rule 29 (instruction)

    declaration   go to state 32
    datatype      go to state 33
    instruction   go to state 150
    instruction1  go to state 36
    selection     go to state 37
    appel         go to state 38
    returne       go to state 39


State 147

   22 declarateur: declarateur '[' CONSTANTE $@4 ']' .

    $default  reduce using rule 22 (declarateur)


State 148

   31 instruction: FOR $@5 '(' instruction1 ';' condition ';' . instruction1 ')' instruction

    IDENTIFICATEUR  shift, and go to state 110
    UNARY           shift, and go to state 30

    $default  reduce using rule 38 (instruction1)

    instruction1  go to state 151


State 149

   49 selection: IF $@9 '(' condition ')' $@10 instruction .

    $default  reduce using rule 49 (selection)


State 150

   53 selection: IF $@11 '(' condition ')' $@12 instruction . $@13 ELSE instruction

    $default  reduce using rule 52 ($@13)

    $@13  go to state 152


State 151

   31 instruction: FOR $@5 '(' instruction1 ';' condition ';' instruction1 . ')' instruction

    ')'  shift, and go to state 153


State 152

   53 selection: IF $@11 '(' condition ')' $@12 instruction $@13 . ELSE instruction

    ELSE  shift, and go to state 154


State 153

   31 instruction: FOR $@5 '(' instruction1 ';' condition ';' instruction1 ')' . instruction

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 23
    SWITCH          shift, and go to state 24
    CASE            shift, and go to state 25
    DEFAULT         shift, and go to state 26
    BREAK           shift, and go to state 27
    IF              shift, and go to state 28
    IDENTIFICATEUR  shift, and go to state 29
    UNARY           shift, and go to state 30
    RETURN          shift, and go to state 31

    VOID            [reduce using rule 29 (instruction)]
    VOID            [reduce using rule 95 (returne)]
    INT             [reduce using rule 29 (instruction)]
    INT             [reduce using rule 95 (returne)]
    FOR             [reduce using rule 29 (instruction)]
    FOR             [reduce using rule 95 (returne)]
    SWITCH          [reduce using rule 29 (instruction)]
    SWITCH          [reduce using rule 95 (returne)]
    CASE            [reduce using rule 29 (instruction)]
    CASE            [reduce using rule 95 (returne)]
    DEFAULT         [reduce using rule 29 (instruction)]
    DEFAULT         [reduce using rule 95 (returne)]
    BREAK           [reduce using rule 29 (instruction)]
    BREAK           [reduce using rule 95 (returne)]
    IF              [reduce using rule 29 (instruction)]
    IF              [reduce using rule 95 (returne)]
    ELSE            reduce using rule 29 (instruction)
    ELSE            [reduce using rule 95 (returne)]
    IDENTIFICATEUR  [reduce using rule 29 (instruction)]
    IDENTIFICATEUR  [reduce using rule 95 (returne)]
    UNARY           [reduce using rule 29 (instruction)]
    UNARY           [reduce using rule 95 (returne)]
    RETURN          [reduce using rule 29 (instruction)]
    RETURN          [reduce using rule 95 (returne)]
    '}'             reduce using rule 29 (instruction)
    '}'             [reduce using rule 95 (returne)]
    ';'             reduce using rule 29 (instruction)
    ';'             [reduce using rule 38 (instruction1)]
    ';'             [reduce using rule 95 (returne)]
    $default        reduce using rule 29 (instruction)

    declaration   go to state 32
    datatype      go to state 33
    instruction   go to state 155
    instruction1  go to state 36
    selection     go to state 37
    appel         go to state 38
    returne       go to state 39


State 154

   53 selection: IF $@11 '(' condition ')' $@12 instruction $@13 ELSE . instruction

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 23
    SWITCH          shift, and go to state 24
    CASE            shift, and go to state 25
    DEFAULT         shift, and go to state 26
    BREAK           shift, and go to state 27
    IF              shift, and go to state 28
    IDENTIFICATEUR  shift, and go to state 29
    UNARY           shift, and go to state 30
    RETURN          shift, and go to state 31

    VOID            [reduce using rule 29 (instruction)]
    VOID            [reduce using rule 95 (returne)]
    INT             [reduce using rule 29 (instruction)]
    INT             [reduce using rule 95 (returne)]
    FOR             [reduce using rule 29 (instruction)]
    FOR             [reduce using rule 95 (returne)]
    SWITCH          [reduce using rule 29 (instruction)]
    SWITCH          [reduce using rule 95 (returne)]
    CASE            [reduce using rule 29 (instruction)]
    CASE            [reduce using rule 95 (returne)]
    DEFAULT         [reduce using rule 29 (instruction)]
    DEFAULT         [reduce using rule 95 (returne)]
    BREAK           [reduce using rule 29 (instruction)]
    BREAK           [reduce using rule 95 (returne)]
    IF              [reduce using rule 29 (instruction)]
    IF              [reduce using rule 95 (returne)]
    ELSE            reduce using rule 29 (instruction)
    ELSE            [reduce using rule 95 (returne)]
    IDENTIFICATEUR  [reduce using rule 29 (instruction)]
    IDENTIFICATEUR  [reduce using rule 95 (returne)]
    UNARY           [reduce using rule 29 (instruction)]
    UNARY           [reduce using rule 95 (returne)]
    RETURN          [reduce using rule 29 (instruction)]
    RETURN          [reduce using rule 95 (returne)]
    '}'             reduce using rule 29 (instruction)
    '}'             [reduce using rule 95 (returne)]
    ';'             reduce using rule 29 (instruction)
    ';'             [reduce using rule 38 (instruction1)]
    ';'             [reduce using rule 95 (returne)]
    $default        reduce using rule 29 (instruction)

    declaration   go to state 32
    datatype      go to state 33
    instruction   go to state 156
    instruction1  go to state 36
    selection     go to state 37
    appel         go to state 38
    returne       go to state 39


State 155

   31 instruction: FOR $@5 '(' instruction1 ';' condition ';' instruction1 ')' instruction .

    $default  reduce using rule 31 (instruction)


State 156

   53 selection: IF $@11 '(' condition ')' $@12 instruction $@13 ELSE instruction .

    $default  reduce using rule 53 (selection)
