Rules useless in parser due to conflicts

   36 $@7: %empty


State 43 conflicts: 21 reduce/reduce
State 46 conflicts: 1 reduce/reduce
State 115 conflicts: 1 reduce/reduce


Grammar

    0 $accept: programme $end

    1 programme: liste_declarations liste_fonctions

    2 liste_declarations: liste_declarations declaration
    3                   | %empty

    4 liste_fonctions: fonction liste_fonctions
    5                | %empty

    6 declaration: type liste_declarateurs ';'

    7 liste_declarateurs: liste_declarateurs ',' declarateur
    8                   | declarateur

    9 declarateur: IDENTIFICATEUR

   10 $@1: %empty

   11 declarateur: declarateur '[' CONSTANTE $@1 ']'

   12 $@2: %empty

   13 fonction: type IDENTIFICATEUR $@2 '(' liste_parms ')' '{' liste_declarations liste_instructions '}'

   14 $@3: %empty

   15 fonction: EXTERN type IDENTIFICATEUR $@3 '(' liste_parms ')' ';'

   16 type: VOID
   17     | INT

   18 liste_parms: liste_parms ',' parm
   19            | parm
   20            | %empty

   21 parm: INT IDENTIFICATEUR

   22 liste_instructions: instruction liste_instructions
   23                   | %empty

   24 instruction: affectation ';'
   25            | iteration
   26            | selection
   27            | saut
   28            | appel
   29            | bloc

   30 $@4: %empty

   31 iteration: FOR $@4 '(' affectation ';' condition ';' affectation ')' instruction

   32 $@5: %empty

   33 iteration: WHILE $@5 '(' condition ')' instruction

   34 $@6: %empty

   35 selection: IF $@6 '(' condition ')' instruction

   36 $@7: %empty

   37 selection: IF $@7 '(' condition ')' instruction ELSE instruction

   38 $@8: %empty

   39 selection: SWITCH $@8 '(' expression ')' instruction

   40 $@9: %empty

   41 $@10: %empty

   42 selection: CASE $@9 CONSTANTE $@10 ':' instruction

   43 $@11: %empty

   44 selection: DEFAULT $@11 ':' instruction

   45 $@12: %empty

   46 saut: BREAK $@12 ';'

   47 $@13: %empty

   48 saut: RETURN $@13 ';'

   49 $@14: %empty

   50 saut: RETURN $@14 expression ';'

   51 affectation: variable '=' expression

   52 bloc: '{' liste_declarations liste_instructions '}'

   53 appel: IDENTIFICATEUR '(' liste_expressions ')' ';'

   54 variable: IDENTIFICATEUR
   55         | tableu

   56 tableu: tableu '[' expression ']'
   57       | IDENTIFICATEUR

   58 expression: '(' expression ')'
   59           | expression binary_op expression
   60           | MOINS expression

   61 $@15: %empty

   62 expression: CONSTANTE $@15
   63           | variable
   64           | appel

   65 liste_expressions: expression ',' liste_expressions
   66                  | expression

   67 condition: NOT '(' condition ')'
   68          | condition binary_rel condition
   69          | '(' condition ')'
   70          | expression binary_comp expression

   71 binary_op: PLUS
   72          | MOINS
   73          | MUL
   74          | DIV
   75          | LSHIFT
   76          | RSHIFT
   77          | BAND
   78          | BOR

   79 binary_rel: LAND
   80           | LOR

   81 binary_comp: LT
   82            | GT
   83            | GEQ
   84            | LEQ
   85            | EQ
   86            | NEQ


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 13 15 31 33 35 37 39 53 58 67 69
    ')' (41) 13 15 31 33 35 37 39 53 58 67 69
    ',' (44) 7 18 65
    ':' (58) 42 44
    ';' (59) 6 15 24 31 46 48 50 53
    '=' (61) 51
    '[' (91) 11 56
    ']' (93) 11 56
    '{' (123) 13 52
    '}' (125) 13 52
    error (256)
    IDENTIFICATEUR <nd_obj> (258) 9 13 15 21 53 54 57
    CONSTANTE <nd_obj> (259) 11 42 62
    VOID <nd_obj> (260) 16
    INT <nd_obj> (261) 17 21
    FOR <nd_obj> (262) 31
    WHILE <nd_obj> (263) 33
    IF <nd_obj> (264) 35 37
    ELSE <nd_obj> (265) 37
    SWITCH <nd_obj> (266) 39
    CASE <nd_obj> (267) 42
    DEFAULT <nd_obj> (268) 44
    BREAK <nd_obj> (269) 46
    RETURN <nd_obj> (270) 48 50
    PLUS <nd_obj> (271) 71
    MOINS <nd_obj> (272) 60 72
    MUL <nd_obj> (273) 73
    DIV <nd_obj> (274) 74
    LSHIFT <nd_obj> (275) 75
    RSHIFT <nd_obj> (276) 76
    BAND <nd_obj> (277) 77
    BOR <nd_obj> (278) 78
    LAND <nd_obj> (279) 79
    LOR <nd_obj> (280) 80
    LT <nd_obj> (281) 81
    GT <nd_obj> (282) 82
    EXTERN <nd_obj> (283) 15
    GEQ <nd_obj> (284) 83
    LEQ <nd_obj> (285) 84
    EQ <nd_obj> (286) 85
    NEQ <nd_obj> (287) 86
    NOT <nd_obj> (288) 67
    THEN (289)
    OP (290)
    REL (291)


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    programme <nd_obj> (48)
        on left: 1
        on right: 0
    liste_declarations <nd_obj> (49)
        on left: 2 3
        on right: 1 2 13 52
    liste_fonctions <nd_obj> (50)
        on left: 4 5
        on right: 1 4
    declaration (51)
        on left: 6
        on right: 2
    liste_declarateurs (52)
        on left: 7 8
        on right: 6 7
    declarateur (53)
        on left: 9 11
        on right: 7 8 11
    $@1 (54)
        on left: 10
        on right: 11
    fonction <nd_obj> (55)
        on left: 13 15
        on right: 4
    $@2 (56)
        on left: 12
        on right: 13
    $@3 (57)
        on left: 14
        on right: 15
    type <nd_obj> (58)
        on left: 16 17
        on right: 6 13 15
    liste_parms (59)
        on left: 18 19 20
        on right: 13 15 18
    parm (60)
        on left: 21
        on right: 18 19
    liste_instructions <nd_obj> (61)
        on left: 22 23
        on right: 13 22 52
    instruction <nd_obj> (62)
        on left: 24 25 26 27 28 29
        on right: 22 31 33 35 37 39 42 44
    iteration <nd_obj> (63)
        on left: 31 33
        on right: 25
    $@4 (64)
        on left: 30
        on right: 31
    $@5 (65)
        on left: 32
        on right: 33
    selection <nd_obj> (66)
        on left: 35 37 39 42 44
        on right: 26
    $@6 (67)
        on left: 34
        on right: 35
    $@7 (68)
        on left: 36
        on right: 37
    $@8 (69)
        on left: 38
        on right: 39
    $@9 (70)
        on left: 40
        on right: 42
    $@10 (71)
        on left: 41
        on right: 42
    $@11 (72)
        on left: 43
        on right: 44
    saut <nd_obj> (73)
        on left: 46 48 50
        on right: 27
    $@12 (74)
        on left: 45
        on right: 46
    $@13 (75)
        on left: 47
        on right: 48
    $@14 (76)
        on left: 49
        on right: 50
    affectation <nd_obj> (77)
        on left: 51
        on right: 24 31
    bloc <nd_obj> (78)
        on left: 52
        on right: 29
    appel <nd_obj> (79)
        on left: 53
        on right: 28 64
    variable <nd_obj2> (80)
        on left: 54 55
        on right: 51 63
    tableu <nd_obj> (81)
        on left: 56 57
        on right: 55 56
    expression <nd_obj2> (82)
        on left: 58 59 60 62 63 64
        on right: 39 50 51 56 58 59 60 65 66 70
    $@15 (83)
        on left: 61
        on right: 62
    liste_expressions <nd_obj> (84)
        on left: 65 66
        on right: 53 65
    condition <nd_obj3> (85)
        on left: 67 68 69 70
        on right: 31 33 35 37 67 68 69
    binary_op <nd_obj> (86)
        on left: 71 72 73 74 75 76 77 78
        on right: 59
    binary_rel (87)
        on left: 79 80
        on right: 68
    binary_comp (88)
        on left: 81 82 83 84 85 86
        on right: 70


State 0

    0 $accept: . programme $end

    $default  reduce using rule 3 (liste_declarations)

    programme           go to state 1
    liste_declarations  go to state 2


State 1

    0 $accept: programme . $end

    $end  shift, and go to state 3


State 2

    1 programme: liste_declarations . liste_fonctions
    2 liste_declarations: liste_declarations . declaration

    VOID    shift, and go to state 4
    INT     shift, and go to state 5
    EXTERN  shift, and go to state 6

    $default  reduce using rule 5 (liste_fonctions)

    liste_fonctions  go to state 7
    declaration      go to state 8
    fonction         go to state 9
    type             go to state 10


State 3

    0 $accept: programme $end .

    $default  accept


State 4

   16 type: VOID .

    $default  reduce using rule 16 (type)


State 5

   17 type: INT .

    $default  reduce using rule 17 (type)


State 6

   15 fonction: EXTERN . type IDENTIFICATEUR $@3 '(' liste_parms ')' ';'

    VOID  shift, and go to state 4
    INT   shift, and go to state 5

    type  go to state 11


State 7

    1 programme: liste_declarations liste_fonctions .

    $default  reduce using rule 1 (programme)


State 8

    2 liste_declarations: liste_declarations declaration .

    $default  reduce using rule 2 (liste_declarations)


State 9

    4 liste_fonctions: fonction . liste_fonctions

    VOID    shift, and go to state 4
    INT     shift, and go to state 5
    EXTERN  shift, and go to state 6

    $default  reduce using rule 5 (liste_fonctions)

    liste_fonctions  go to state 12
    fonction         go to state 9
    type             go to state 13


State 10

    6 declaration: type . liste_declarateurs ';'
   13 fonction: type . IDENTIFICATEUR $@2 '(' liste_parms ')' '{' liste_declarations liste_instructions '}'

    IDENTIFICATEUR  shift, and go to state 14

    liste_declarateurs  go to state 15
    declarateur         go to state 16


State 11

   15 fonction: EXTERN type . IDENTIFICATEUR $@3 '(' liste_parms ')' ';'

    IDENTIFICATEUR  shift, and go to state 17


State 12

    4 liste_fonctions: fonction liste_fonctions .

    $default  reduce using rule 4 (liste_fonctions)


State 13

   13 fonction: type . IDENTIFICATEUR $@2 '(' liste_parms ')' '{' liste_declarations liste_instructions '}'

    IDENTIFICATEUR  shift, and go to state 18


State 14

    9 declarateur: IDENTIFICATEUR .
   13 fonction: type IDENTIFICATEUR . $@2 '(' liste_parms ')' '{' liste_declarations liste_instructions '}'

    '('       reduce using rule 12 ($@2)
    $default  reduce using rule 9 (declarateur)

    $@2  go to state 19


State 15

    6 declaration: type liste_declarateurs . ';'
    7 liste_declarateurs: liste_declarateurs . ',' declarateur

    ';'  shift, and go to state 20
    ','  shift, and go to state 21


State 16

    8 liste_declarateurs: declarateur .
   11 declarateur: declarateur . '[' CONSTANTE $@1 ']'

    '['  shift, and go to state 22

    $default  reduce using rule 8 (liste_declarateurs)


State 17

   15 fonction: EXTERN type IDENTIFICATEUR . $@3 '(' liste_parms ')' ';'

    $default  reduce using rule 14 ($@3)

    $@3  go to state 23


State 18

   13 fonction: type IDENTIFICATEUR . $@2 '(' liste_parms ')' '{' liste_declarations liste_instructions '}'

    $default  reduce using rule 12 ($@2)

    $@2  go to state 19


State 19

   13 fonction: type IDENTIFICATEUR $@2 . '(' liste_parms ')' '{' liste_declarations liste_instructions '}'

    '('  shift, and go to state 24


State 20

    6 declaration: type liste_declarateurs ';' .

    $default  reduce using rule 6 (declaration)


State 21

    7 liste_declarateurs: liste_declarateurs ',' . declarateur

    IDENTIFICATEUR  shift, and go to state 25

    declarateur  go to state 26


State 22

   11 declarateur: declarateur '[' . CONSTANTE $@1 ']'

    CONSTANTE  shift, and go to state 27


State 23

   15 fonction: EXTERN type IDENTIFICATEUR $@3 . '(' liste_parms ')' ';'

    '('  shift, and go to state 28


State 24

   13 fonction: type IDENTIFICATEUR $@2 '(' . liste_parms ')' '{' liste_declarations liste_instructions '}'

    INT  shift, and go to state 29

    $default  reduce using rule 20 (liste_parms)

    liste_parms  go to state 30
    parm         go to state 31


State 25

    9 declarateur: IDENTIFICATEUR .

    $default  reduce using rule 9 (declarateur)


State 26

    7 liste_declarateurs: liste_declarateurs ',' declarateur .
   11 declarateur: declarateur . '[' CONSTANTE $@1 ']'

    '['  shift, and go to state 22

    $default  reduce using rule 7 (liste_declarateurs)


State 27

   11 declarateur: declarateur '[' CONSTANTE . $@1 ']'

    $default  reduce using rule 10 ($@1)

    $@1  go to state 32


State 28

   15 fonction: EXTERN type IDENTIFICATEUR $@3 '(' . liste_parms ')' ';'

    INT  shift, and go to state 29

    $default  reduce using rule 20 (liste_parms)

    liste_parms  go to state 33
    parm         go to state 31


State 29

   21 parm: INT . IDENTIFICATEUR

    IDENTIFICATEUR  shift, and go to state 34


State 30

   13 fonction: type IDENTIFICATEUR $@2 '(' liste_parms . ')' '{' liste_declarations liste_instructions '}'
   18 liste_parms: liste_parms . ',' parm

    ','  shift, and go to state 35
    ')'  shift, and go to state 36


State 31

   19 liste_parms: parm .

    $default  reduce using rule 19 (liste_parms)


State 32

   11 declarateur: declarateur '[' CONSTANTE $@1 . ']'

    ']'  shift, and go to state 37


State 33

   15 fonction: EXTERN type IDENTIFICATEUR $@3 '(' liste_parms . ')' ';'
   18 liste_parms: liste_parms . ',' parm

    ','  shift, and go to state 35
    ')'  shift, and go to state 38


State 34

   21 parm: INT IDENTIFICATEUR .

    $default  reduce using rule 21 (parm)


State 35

   18 liste_parms: liste_parms ',' . parm

    INT  shift, and go to state 29

    parm  go to state 39


State 36

   13 fonction: type IDENTIFICATEUR $@2 '(' liste_parms ')' . '{' liste_declarations liste_instructions '}'

    '{'  shift, and go to state 40


State 37

   11 declarateur: declarateur '[' CONSTANTE $@1 ']' .

    $default  reduce using rule 11 (declarateur)


State 38

   15 fonction: EXTERN type IDENTIFICATEUR $@3 '(' liste_parms ')' . ';'

    ';'  shift, and go to state 41


State 39

   18 liste_parms: liste_parms ',' parm .

    $default  reduce using rule 18 (liste_parms)


State 40

   13 fonction: type IDENTIFICATEUR $@2 '(' liste_parms ')' '{' . liste_declarations liste_instructions '}'

    $default  reduce using rule 3 (liste_declarations)

    liste_declarations  go to state 42


State 41

   15 fonction: EXTERN type IDENTIFICATEUR $@3 '(' liste_parms ')' ';' .

    $default  reduce using rule 15 (fonction)


State 42

    2 liste_declarations: liste_declarations . declaration
   13 fonction: type IDENTIFICATEUR $@2 '(' liste_parms ')' '{' liste_declarations . liste_instructions '}'

    IDENTIFICATEUR  shift, and go to state 43
    VOID            shift, and go to state 4
    INT             shift, and go to state 5
    FOR             shift, and go to state 44
    WHILE           shift, and go to state 45
    IF              shift, and go to state 46
    SWITCH          shift, and go to state 47
    CASE            shift, and go to state 48
    DEFAULT         shift, and go to state 49
    BREAK           shift, and go to state 50
    RETURN          shift, and go to state 51
    '{'             shift, and go to state 52

    $default  reduce using rule 23 (liste_instructions)

    declaration         go to state 8
    type                go to state 53
    liste_instructions  go to state 54
    instruction         go to state 55
    iteration           go to state 56
    selection           go to state 57
    saut                go to state 58
    affectation         go to state 59
    bloc                go to state 60
    appel               go to state 61
    variable            go to state 62
    tableu              go to state 63


State 43

   53 appel: IDENTIFICATEUR . '(' liste_expressions ')' ';'
   54 variable: IDENTIFICATEUR .
   57 tableu: IDENTIFICATEUR .

    '('  shift, and go to state 64

    PLUS      reduce using rule 54 (variable)
    PLUS      [reduce using rule 57 (tableu)]
    MOINS     reduce using rule 54 (variable)
    MOINS     [reduce using rule 57 (tableu)]
    MUL       reduce using rule 54 (variable)
    MUL       [reduce using rule 57 (tableu)]
    DIV       reduce using rule 54 (variable)
    DIV       [reduce using rule 57 (tableu)]
    LSHIFT    reduce using rule 54 (variable)
    LSHIFT    [reduce using rule 57 (tableu)]
    RSHIFT    reduce using rule 54 (variable)
    RSHIFT    [reduce using rule 57 (tableu)]
    BAND      reduce using rule 54 (variable)
    BAND      [reduce using rule 57 (tableu)]
    BOR       reduce using rule 54 (variable)
    BOR       [reduce using rule 57 (tableu)]
    LAND      reduce using rule 54 (variable)
    LAND      [reduce using rule 57 (tableu)]
    LOR       reduce using rule 54 (variable)
    LOR       [reduce using rule 57 (tableu)]
    LT        reduce using rule 54 (variable)
    LT        [reduce using rule 57 (tableu)]
    GT        reduce using rule 54 (variable)
    GT        [reduce using rule 57 (tableu)]
    GEQ       reduce using rule 54 (variable)
    GEQ       [reduce using rule 57 (tableu)]
    LEQ       reduce using rule 54 (variable)
    LEQ       [reduce using rule 57 (tableu)]
    EQ        reduce using rule 54 (variable)
    EQ        [reduce using rule 57 (tableu)]
    NEQ       reduce using rule 54 (variable)
    NEQ       [reduce using rule 57 (tableu)]
    ';'       reduce using rule 54 (variable)
    ';'       [reduce using rule 57 (tableu)]
    ','       reduce using rule 54 (variable)
    ','       [reduce using rule 57 (tableu)]
    '['       reduce using rule 57 (tableu)
    ']'       reduce using rule 54 (variable)
    ']'       [reduce using rule 57 (tableu)]
    ')'       reduce using rule 54 (variable)
    ')'       [reduce using rule 57 (tableu)]
    '='       reduce using rule 54 (variable)
    '='       [reduce using rule 57 (tableu)]
    $default  reduce using rule 54 (variable)


State 44

   31 iteration: FOR . $@4 '(' affectation ';' condition ';' affectation ')' instruction

    $default  reduce using rule 30 ($@4)

    $@4  go to state 65


State 45

   33 iteration: WHILE . $@5 '(' condition ')' instruction

    $default  reduce using rule 32 ($@5)

    $@5  go to state 66


State 46

   35 selection: IF . $@6 '(' condition ')' instruction
   37          | IF . $@7 '(' condition ')' instruction ELSE instruction

    '('       reduce using rule 34 ($@6)
    '('       [reduce using rule 36 ($@7)]
    $default  reduce using rule 34 ($@6)

    $@6  go to state 67
    $@7  go to state 68


State 47

   39 selection: SWITCH . $@8 '(' expression ')' instruction

    $default  reduce using rule 38 ($@8)

    $@8  go to state 69


State 48

   42 selection: CASE . $@9 CONSTANTE $@10 ':' instruction

    $default  reduce using rule 40 ($@9)

    $@9  go to state 70


State 49

   44 selection: DEFAULT . $@11 ':' instruction

    $default  reduce using rule 43 ($@11)

    $@11  go to state 71


State 50

   46 saut: BREAK . $@12 ';'

    $default  reduce using rule 45 ($@12)

    $@12  go to state 72


State 51

   48 saut: RETURN . $@13 ';'
   50     | RETURN . $@14 expression ';'

    ';'       reduce using rule 47 ($@13)
    $default  reduce using rule 49 ($@14)

    $@13  go to state 73
    $@14  go to state 74


State 52

   52 bloc: '{' . liste_declarations liste_instructions '}'

    $default  reduce using rule 3 (liste_declarations)

    liste_declarations  go to state 75


State 53

    6 declaration: type . liste_declarateurs ';'

    IDENTIFICATEUR  shift, and go to state 25

    liste_declarateurs  go to state 15
    declarateur         go to state 16


State 54

   13 fonction: type IDENTIFICATEUR $@2 '(' liste_parms ')' '{' liste_declarations liste_instructions . '}'

    '}'  shift, and go to state 76


State 55

   22 liste_instructions: instruction . liste_instructions

    IDENTIFICATEUR  shift, and go to state 43
    FOR             shift, and go to state 44
    WHILE           shift, and go to state 45
    IF              shift, and go to state 46
    SWITCH          shift, and go to state 47
    CASE            shift, and go to state 48
    DEFAULT         shift, and go to state 49
    BREAK           shift, and go to state 50
    RETURN          shift, and go to state 51
    '{'             shift, and go to state 52

    $default  reduce using rule 23 (liste_instructions)

    liste_instructions  go to state 77
    instruction         go to state 55
    iteration           go to state 56
    selection           go to state 57
    saut                go to state 58
    affectation         go to state 59
    bloc                go to state 60
    appel               go to state 61
    variable            go to state 62
    tableu              go to state 63


State 56

   25 instruction: iteration .

    $default  reduce using rule 25 (instruction)


State 57

   26 instruction: selection .

    $default  reduce using rule 26 (instruction)


State 58

   27 instruction: saut .

    $default  reduce using rule 27 (instruction)


State 59

   24 instruction: affectation . ';'

    ';'  shift, and go to state 78


State 60

   29 instruction: bloc .

    $default  reduce using rule 29 (instruction)


State 61

   28 instruction: appel .

    $default  reduce using rule 28 (instruction)


State 62

   51 affectation: variable . '=' expression

    '='  shift, and go to state 79


State 63

   55 variable: tableu .
   56 tableu: tableu . '[' expression ']'

    '['  shift, and go to state 80

    $default  reduce using rule 55 (variable)


State 64

   53 appel: IDENTIFICATEUR '(' . liste_expressions ')' ';'

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    '('             shift, and go to state 83

    appel              go to state 84
    variable           go to state 85
    tableu             go to state 63
    expression         go to state 86
    liste_expressions  go to state 87


State 65

   31 iteration: FOR $@4 . '(' affectation ';' condition ';' affectation ')' instruction

    '('  shift, and go to state 88


State 66

   33 iteration: WHILE $@5 . '(' condition ')' instruction

    '('  shift, and go to state 89


State 67

   35 selection: IF $@6 . '(' condition ')' instruction

    '('  shift, and go to state 90


State 68

   37 selection: IF $@7 . '(' condition ')' instruction ELSE instruction

    '('  shift, and go to state 91


State 69

   39 selection: SWITCH $@8 . '(' expression ')' instruction

    '('  shift, and go to state 92


State 70

   42 selection: CASE $@9 . CONSTANTE $@10 ':' instruction

    CONSTANTE  shift, and go to state 93


State 71

   44 selection: DEFAULT $@11 . ':' instruction

    ':'  shift, and go to state 94


State 72

   46 saut: BREAK $@12 . ';'

    ';'  shift, and go to state 95


State 73

   48 saut: RETURN $@13 . ';'

    ';'  shift, and go to state 96


State 74

   50 saut: RETURN $@14 . expression ';'

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    '('             shift, and go to state 83

    appel       go to state 84
    variable    go to state 85
    tableu      go to state 63
    expression  go to state 97


State 75

    2 liste_declarations: liste_declarations . declaration
   52 bloc: '{' liste_declarations . liste_instructions '}'

    IDENTIFICATEUR  shift, and go to state 43
    VOID            shift, and go to state 4
    INT             shift, and go to state 5
    FOR             shift, and go to state 44
    WHILE           shift, and go to state 45
    IF              shift, and go to state 46
    SWITCH          shift, and go to state 47
    CASE            shift, and go to state 48
    DEFAULT         shift, and go to state 49
    BREAK           shift, and go to state 50
    RETURN          shift, and go to state 51
    '{'             shift, and go to state 52

    $default  reduce using rule 23 (liste_instructions)

    declaration         go to state 8
    type                go to state 53
    liste_instructions  go to state 98
    instruction         go to state 55
    iteration           go to state 56
    selection           go to state 57
    saut                go to state 58
    affectation         go to state 59
    bloc                go to state 60
    appel               go to state 61
    variable            go to state 62
    tableu              go to state 63


State 76

   13 fonction: type IDENTIFICATEUR $@2 '(' liste_parms ')' '{' liste_declarations liste_instructions '}' .

    $default  reduce using rule 13 (fonction)


State 77

   22 liste_instructions: instruction liste_instructions .

    $default  reduce using rule 22 (liste_instructions)


State 78

   24 instruction: affectation ';' .

    $default  reduce using rule 24 (instruction)


State 79

   51 affectation: variable '=' . expression

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    '('             shift, and go to state 83

    appel       go to state 84
    variable    go to state 85
    tableu      go to state 63
    expression  go to state 99


State 80

   56 tableu: tableu '[' . expression ']'

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    '('             shift, and go to state 83

    appel       go to state 84
    variable    go to state 85
    tableu      go to state 63
    expression  go to state 100


State 81

   62 expression: CONSTANTE . $@15

    $default  reduce using rule 61 ($@15)

    $@15  go to state 101


State 82

   60 expression: MOINS . expression

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    '('             shift, and go to state 83

    appel       go to state 84
    variable    go to state 85
    tableu      go to state 63
    expression  go to state 102


State 83

   58 expression: '(' . expression ')'

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    '('             shift, and go to state 83

    appel       go to state 84
    variable    go to state 85
    tableu      go to state 63
    expression  go to state 103


State 84

   64 expression: appel .

    $default  reduce using rule 64 (expression)


State 85

   63 expression: variable .

    $default  reduce using rule 63 (expression)


State 86

   59 expression: expression . binary_op expression
   65 liste_expressions: expression . ',' liste_expressions
   66                  | expression .

    PLUS    shift, and go to state 104
    MOINS   shift, and go to state 105
    MUL     shift, and go to state 106
    DIV     shift, and go to state 107
    LSHIFT  shift, and go to state 108
    RSHIFT  shift, and go to state 109
    BAND    shift, and go to state 110
    BOR     shift, and go to state 111
    ','     shift, and go to state 112

    $default  reduce using rule 66 (liste_expressions)

    binary_op  go to state 113


State 87

   53 appel: IDENTIFICATEUR '(' liste_expressions . ')' ';'

    ')'  shift, and go to state 114


State 88

   31 iteration: FOR $@4 '(' . affectation ';' condition ';' affectation ')' instruction

    IDENTIFICATEUR  shift, and go to state 115

    affectation  go to state 116
    variable     go to state 62
    tableu       go to state 63


State 89

   33 iteration: WHILE $@5 '(' . condition ')' instruction

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    NOT             shift, and go to state 117
    '('             shift, and go to state 118

    appel       go to state 84
    variable    go to state 85
    tableu      go to state 63
    expression  go to state 119
    condition   go to state 120


State 90

   35 selection: IF $@6 '(' . condition ')' instruction

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    NOT             shift, and go to state 117
    '('             shift, and go to state 118

    appel       go to state 84
    variable    go to state 85
    tableu      go to state 63
    expression  go to state 119
    condition   go to state 121


State 91

   37 selection: IF $@7 '(' . condition ')' instruction ELSE instruction

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    NOT             shift, and go to state 117
    '('             shift, and go to state 118

    appel       go to state 84
    variable    go to state 85
    tableu      go to state 63
    expression  go to state 119
    condition   go to state 122


State 92

   39 selection: SWITCH $@8 '(' . expression ')' instruction

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    '('             shift, and go to state 83

    appel       go to state 84
    variable    go to state 85
    tableu      go to state 63
    expression  go to state 123


State 93

   42 selection: CASE $@9 CONSTANTE . $@10 ':' instruction

    $default  reduce using rule 41 ($@10)

    $@10  go to state 124


State 94

   44 selection: DEFAULT $@11 ':' . instruction

    IDENTIFICATEUR  shift, and go to state 43
    FOR             shift, and go to state 44
    WHILE           shift, and go to state 45
    IF              shift, and go to state 46
    SWITCH          shift, and go to state 47
    CASE            shift, and go to state 48
    DEFAULT         shift, and go to state 49
    BREAK           shift, and go to state 50
    RETURN          shift, and go to state 51
    '{'             shift, and go to state 52

    instruction  go to state 125
    iteration    go to state 56
    selection    go to state 57
    saut         go to state 58
    affectation  go to state 59
    bloc         go to state 60
    appel        go to state 61
    variable     go to state 62
    tableu       go to state 63


State 95

   46 saut: BREAK $@12 ';' .

    $default  reduce using rule 46 (saut)


State 96

   48 saut: RETURN $@13 ';' .

    $default  reduce using rule 48 (saut)


State 97

   50 saut: RETURN $@14 expression . ';'
   59 expression: expression . binary_op expression

    PLUS    shift, and go to state 104
    MOINS   shift, and go to state 105
    MUL     shift, and go to state 106
    DIV     shift, and go to state 107
    LSHIFT  shift, and go to state 108
    RSHIFT  shift, and go to state 109
    BAND    shift, and go to state 110
    BOR     shift, and go to state 111
    ';'     shift, and go to state 126

    binary_op  go to state 113


State 98

   52 bloc: '{' liste_declarations liste_instructions . '}'

    '}'  shift, and go to state 127


State 99

   51 affectation: variable '=' expression .
   59 expression: expression . binary_op expression

    PLUS    shift, and go to state 104
    MOINS   shift, and go to state 105
    MUL     shift, and go to state 106
    DIV     shift, and go to state 107
    LSHIFT  shift, and go to state 108
    RSHIFT  shift, and go to state 109
    BAND    shift, and go to state 110
    BOR     shift, and go to state 111

    $default  reduce using rule 51 (affectation)

    binary_op  go to state 113


State 100

   56 tableu: tableu '[' expression . ']'
   59 expression: expression . binary_op expression

    PLUS    shift, and go to state 104
    MOINS   shift, and go to state 105
    MUL     shift, and go to state 106
    DIV     shift, and go to state 107
    LSHIFT  shift, and go to state 108
    RSHIFT  shift, and go to state 109
    BAND    shift, and go to state 110
    BOR     shift, and go to state 111
    ']'     shift, and go to state 128

    binary_op  go to state 113


State 101

   62 expression: CONSTANTE $@15 .

    $default  reduce using rule 62 (expression)


State 102

   59 expression: expression . binary_op expression
   60           | MOINS expression .

    MUL     shift, and go to state 106
    DIV     shift, and go to state 107
    LSHIFT  shift, and go to state 108
    RSHIFT  shift, and go to state 109
    BAND    shift, and go to state 110
    BOR     shift, and go to state 111

    $default  reduce using rule 60 (expression)

    binary_op  go to state 113


State 103

   58 expression: '(' expression . ')'
   59           | expression . binary_op expression

    PLUS    shift, and go to state 104
    MOINS   shift, and go to state 105
    MUL     shift, and go to state 106
    DIV     shift, and go to state 107
    LSHIFT  shift, and go to state 108
    RSHIFT  shift, and go to state 109
    BAND    shift, and go to state 110
    BOR     shift, and go to state 111
    ')'     shift, and go to state 129

    binary_op  go to state 113


State 104

   71 binary_op: PLUS .

    $default  reduce using rule 71 (binary_op)


State 105

   72 binary_op: MOINS .

    $default  reduce using rule 72 (binary_op)


State 106

   73 binary_op: MUL .

    $default  reduce using rule 73 (binary_op)


State 107

   74 binary_op: DIV .

    $default  reduce using rule 74 (binary_op)


State 108

   75 binary_op: LSHIFT .

    $default  reduce using rule 75 (binary_op)


State 109

   76 binary_op: RSHIFT .

    $default  reduce using rule 76 (binary_op)


State 110

   77 binary_op: BAND .

    $default  reduce using rule 77 (binary_op)


State 111

   78 binary_op: BOR .

    $default  reduce using rule 78 (binary_op)


State 112

   65 liste_expressions: expression ',' . liste_expressions

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    '('             shift, and go to state 83

    appel              go to state 84
    variable           go to state 85
    tableu             go to state 63
    expression         go to state 86
    liste_expressions  go to state 130


State 113

   59 expression: expression binary_op . expression

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    '('             shift, and go to state 83

    appel       go to state 84
    variable    go to state 85
    tableu      go to state 63
    expression  go to state 131


State 114

   53 appel: IDENTIFICATEUR '(' liste_expressions ')' . ';'

    ';'  shift, and go to state 132


State 115

   54 variable: IDENTIFICATEUR .
   57 tableu: IDENTIFICATEUR .

    '['       reduce using rule 57 (tableu)
    '='       reduce using rule 54 (variable)
    '='       [reduce using rule 57 (tableu)]
    $default  reduce using rule 54 (variable)


State 116

   31 iteration: FOR $@4 '(' affectation . ';' condition ';' affectation ')' instruction

    ';'  shift, and go to state 133


State 117

   67 condition: NOT . '(' condition ')'

    '('  shift, and go to state 134


State 118

   58 expression: '(' . expression ')'
   69 condition: '(' . condition ')'

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    NOT             shift, and go to state 117
    '('             shift, and go to state 118

    appel       go to state 84
    variable    go to state 85
    tableu      go to state 63
    expression  go to state 135
    condition   go to state 136


State 119

   59 expression: expression . binary_op expression
   70 condition: expression . binary_comp expression

    PLUS    shift, and go to state 104
    MOINS   shift, and go to state 105
    MUL     shift, and go to state 106
    DIV     shift, and go to state 107
    LSHIFT  shift, and go to state 108
    RSHIFT  shift, and go to state 109
    BAND    shift, and go to state 110
    BOR     shift, and go to state 111
    LT      shift, and go to state 137
    GT      shift, and go to state 138
    GEQ     shift, and go to state 139
    LEQ     shift, and go to state 140
    EQ      shift, and go to state 141
    NEQ     shift, and go to state 142

    binary_op    go to state 113
    binary_comp  go to state 143


State 120

   33 iteration: WHILE $@5 '(' condition . ')' instruction
   68 condition: condition . binary_rel condition

    LAND  shift, and go to state 144
    LOR   shift, and go to state 145
    ')'   shift, and go to state 146

    binary_rel  go to state 147


State 121

   35 selection: IF $@6 '(' condition . ')' instruction
   68 condition: condition . binary_rel condition

    LAND  shift, and go to state 144
    LOR   shift, and go to state 145
    ')'   shift, and go to state 148

    binary_rel  go to state 147


State 122

   37 selection: IF $@7 '(' condition . ')' instruction ELSE instruction
   68 condition: condition . binary_rel condition

    LAND  shift, and go to state 144
    LOR   shift, and go to state 145
    ')'   shift, and go to state 149

    binary_rel  go to state 147


State 123

   39 selection: SWITCH $@8 '(' expression . ')' instruction
   59 expression: expression . binary_op expression

    PLUS    shift, and go to state 104
    MOINS   shift, and go to state 105
    MUL     shift, and go to state 106
    DIV     shift, and go to state 107
    LSHIFT  shift, and go to state 108
    RSHIFT  shift, and go to state 109
    BAND    shift, and go to state 110
    BOR     shift, and go to state 111
    ')'     shift, and go to state 150

    binary_op  go to state 113


State 124

   42 selection: CASE $@9 CONSTANTE $@10 . ':' instruction

    ':'  shift, and go to state 151


State 125

   44 selection: DEFAULT $@11 ':' instruction .

    $default  reduce using rule 44 (selection)


State 126

   50 saut: RETURN $@14 expression ';' .

    $default  reduce using rule 50 (saut)


State 127

   52 bloc: '{' liste_declarations liste_instructions '}' .

    $default  reduce using rule 52 (bloc)


State 128

   56 tableu: tableu '[' expression ']' .

    $default  reduce using rule 56 (tableu)


State 129

   58 expression: '(' expression ')' .

    $default  reduce using rule 58 (expression)


State 130

   65 liste_expressions: expression ',' liste_expressions .

    $default  reduce using rule 65 (liste_expressions)


State 131

   59 expression: expression . binary_op expression
   59           | expression binary_op expression .

    $default  reduce using rule 59 (expression)

    binary_op  go to state 113


State 132

   53 appel: IDENTIFICATEUR '(' liste_expressions ')' ';' .

    $default  reduce using rule 53 (appel)


State 133

   31 iteration: FOR $@4 '(' affectation ';' . condition ';' affectation ')' instruction

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    NOT             shift, and go to state 117
    '('             shift, and go to state 118

    appel       go to state 84
    variable    go to state 85
    tableu      go to state 63
    expression  go to state 119
    condition   go to state 152


State 134

   67 condition: NOT '(' . condition ')'

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    NOT             shift, and go to state 117
    '('             shift, and go to state 118

    appel       go to state 84
    variable    go to state 85
    tableu      go to state 63
    expression  go to state 119
    condition   go to state 153


State 135

   58 expression: '(' expression . ')'
   59           | expression . binary_op expression
   70 condition: expression . binary_comp expression

    PLUS    shift, and go to state 104
    MOINS   shift, and go to state 105
    MUL     shift, and go to state 106
    DIV     shift, and go to state 107
    LSHIFT  shift, and go to state 108
    RSHIFT  shift, and go to state 109
    BAND    shift, and go to state 110
    BOR     shift, and go to state 111
    LT      shift, and go to state 137
    GT      shift, and go to state 138
    GEQ     shift, and go to state 139
    LEQ     shift, and go to state 140
    EQ      shift, and go to state 141
    NEQ     shift, and go to state 142
    ')'     shift, and go to state 129

    binary_op    go to state 113
    binary_comp  go to state 143


State 136

   68 condition: condition . binary_rel condition
   69          | '(' condition . ')'

    LAND  shift, and go to state 144
    LOR   shift, and go to state 145
    ')'   shift, and go to state 154

    binary_rel  go to state 147


State 137

   81 binary_comp: LT .

    $default  reduce using rule 81 (binary_comp)


State 138

   82 binary_comp: GT .

    $default  reduce using rule 82 (binary_comp)


State 139

   83 binary_comp: GEQ .

    $default  reduce using rule 83 (binary_comp)


State 140

   84 binary_comp: LEQ .

    $default  reduce using rule 84 (binary_comp)


State 141

   85 binary_comp: EQ .

    $default  reduce using rule 85 (binary_comp)


State 142

   86 binary_comp: NEQ .

    $default  reduce using rule 86 (binary_comp)


State 143

   70 condition: expression binary_comp . expression

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    '('             shift, and go to state 83

    appel       go to state 84
    variable    go to state 85
    tableu      go to state 63
    expression  go to state 155


State 144

   79 binary_rel: LAND .

    $default  reduce using rule 79 (binary_rel)


State 145

   80 binary_rel: LOR .

    $default  reduce using rule 80 (binary_rel)


State 146

   33 iteration: WHILE $@5 '(' condition ')' . instruction

    IDENTIFICATEUR  shift, and go to state 43
    FOR             shift, and go to state 44
    WHILE           shift, and go to state 45
    IF              shift, and go to state 46
    SWITCH          shift, and go to state 47
    CASE            shift, and go to state 48
    DEFAULT         shift, and go to state 49
    BREAK           shift, and go to state 50
    RETURN          shift, and go to state 51
    '{'             shift, and go to state 52

    instruction  go to state 156
    iteration    go to state 56
    selection    go to state 57
    saut         go to state 58
    affectation  go to state 59
    bloc         go to state 60
    appel        go to state 61
    variable     go to state 62
    tableu       go to state 63


State 147

   68 condition: condition binary_rel . condition

    IDENTIFICATEUR  shift, and go to state 43
    CONSTANTE       shift, and go to state 81
    MOINS           shift, and go to state 82
    NOT             shift, and go to state 117
    '('             shift, and go to state 118

    appel       go to state 84
    variable    go to state 85
    tableu      go to state 63
    expression  go to state 119
    condition   go to state 157


State 148

   35 selection: IF $@6 '(' condition ')' . instruction

    IDENTIFICATEUR  shift, and go to state 43
    FOR             shift, and go to state 44
    WHILE           shift, and go to state 45
    IF              shift, and go to state 46
    SWITCH          shift, and go to state 47
    CASE            shift, and go to state 48
    DEFAULT         shift, and go to state 49
    BREAK           shift, and go to state 50
    RETURN          shift, and go to state 51
    '{'             shift, and go to state 52

    instruction  go to state 158
    iteration    go to state 56
    selection    go to state 57
    saut         go to state 58
    affectation  go to state 59
    bloc         go to state 60
    appel        go to state 61
    variable     go to state 62
    tableu       go to state 63


State 149

   37 selection: IF $@7 '(' condition ')' . instruction ELSE instruction

    IDENTIFICATEUR  shift, and go to state 43
    FOR             shift, and go to state 44
    WHILE           shift, and go to state 45
    IF              shift, and go to state 46
    SWITCH          shift, and go to state 47
    CASE            shift, and go to state 48
    DEFAULT         shift, and go to state 49
    BREAK           shift, and go to state 50
    RETURN          shift, and go to state 51
    '{'             shift, and go to state 52

    instruction  go to state 159
    iteration    go to state 56
    selection    go to state 57
    saut         go to state 58
    affectation  go to state 59
    bloc         go to state 60
    appel        go to state 61
    variable     go to state 62
    tableu       go to state 63


State 150

   39 selection: SWITCH $@8 '(' expression ')' . instruction

    IDENTIFICATEUR  shift, and go to state 43
    FOR             shift, and go to state 44
    WHILE           shift, and go to state 45
    IF              shift, and go to state 46
    SWITCH          shift, and go to state 47
    CASE            shift, and go to state 48
    DEFAULT         shift, and go to state 49
    BREAK           shift, and go to state 50
    RETURN          shift, and go to state 51
    '{'             shift, and go to state 52

    instruction  go to state 160
    iteration    go to state 56
    selection    go to state 57
    saut         go to state 58
    affectation  go to state 59
    bloc         go to state 60
    appel        go to state 61
    variable     go to state 62
    tableu       go to state 63


State 151

   42 selection: CASE $@9 CONSTANTE $@10 ':' . instruction

    IDENTIFICATEUR  shift, and go to state 43
    FOR             shift, and go to state 44
    WHILE           shift, and go to state 45
    IF              shift, and go to state 46
    SWITCH          shift, and go to state 47
    CASE            shift, and go to state 48
    DEFAULT         shift, and go to state 49
    BREAK           shift, and go to state 50
    RETURN          shift, and go to state 51
    '{'             shift, and go to state 52

    instruction  go to state 161
    iteration    go to state 56
    selection    go to state 57
    saut         go to state 58
    affectation  go to state 59
    bloc         go to state 60
    appel        go to state 61
    variable     go to state 62
    tableu       go to state 63


State 152

   31 iteration: FOR $@4 '(' affectation ';' condition . ';' affectation ')' instruction
   68 condition: condition . binary_rel condition

    LAND  shift, and go to state 144
    LOR   shift, and go to state 145
    ';'   shift, and go to state 162

    binary_rel  go to state 147


State 153

   67 condition: NOT '(' condition . ')'
   68          | condition . binary_rel condition

    LAND  shift, and go to state 144
    LOR   shift, and go to state 145
    ')'   shift, and go to state 163

    binary_rel  go to state 147


State 154

   69 condition: '(' condition ')' .

    $default  reduce using rule 69 (condition)


State 155

   59 expression: expression . binary_op expression
   70 condition: expression binary_comp expression .

    PLUS    shift, and go to state 104
    MOINS   shift, and go to state 105
    MUL     shift, and go to state 106
    DIV     shift, and go to state 107
    LSHIFT  shift, and go to state 108
    RSHIFT  shift, and go to state 109
    BAND    shift, and go to state 110
    BOR     shift, and go to state 111

    $default  reduce using rule 70 (condition)

    binary_op  go to state 113


State 156

   33 iteration: WHILE $@5 '(' condition ')' instruction .

    $default  reduce using rule 33 (iteration)


State 157

   68 condition: condition . binary_rel condition
   68          | condition binary_rel condition .

    $default  reduce using rule 68 (condition)

    binary_rel  go to state 147


State 158

   35 selection: IF $@6 '(' condition ')' instruction .

    $default  reduce using rule 35 (selection)


State 159

   37 selection: IF $@7 '(' condition ')' instruction . ELSE instruction

    ELSE  shift, and go to state 164


State 160

   39 selection: SWITCH $@8 '(' expression ')' instruction .

    $default  reduce using rule 39 (selection)


State 161

   42 selection: CASE $@9 CONSTANTE $@10 ':' instruction .

    $default  reduce using rule 42 (selection)


State 162

   31 iteration: FOR $@4 '(' affectation ';' condition ';' . affectation ')' instruction

    IDENTIFICATEUR  shift, and go to state 115

    affectation  go to state 165
    variable     go to state 62
    tableu       go to state 63


State 163

   67 condition: NOT '(' condition ')' .

    $default  reduce using rule 67 (condition)


State 164

   37 selection: IF $@7 '(' condition ')' instruction ELSE . instruction

    IDENTIFICATEUR  shift, and go to state 43
    FOR             shift, and go to state 44
    WHILE           shift, and go to state 45
    IF              shift, and go to state 46
    SWITCH          shift, and go to state 47
    CASE            shift, and go to state 48
    DEFAULT         shift, and go to state 49
    BREAK           shift, and go to state 50
    RETURN          shift, and go to state 51
    '{'             shift, and go to state 52

    instruction  go to state 166
    iteration    go to state 56
    selection    go to state 57
    saut         go to state 58
    affectation  go to state 59
    bloc         go to state 60
    appel        go to state 61
    variable     go to state 62
    tableu       go to state 63


State 165

   31 iteration: FOR $@4 '(' affectation ';' condition ';' affectation . ')' instruction

    ')'  shift, and go to state 167


State 166

   37 selection: IF $@7 '(' condition ')' instruction ELSE instruction .

    $default  reduce using rule 37 (selection)


State 167

   31 iteration: FOR $@4 '(' affectation ';' condition ';' affectation ')' . instruction

    IDENTIFICATEUR  shift, and go to state 43
    FOR             shift, and go to state 44
    WHILE           shift, and go to state 45
    IF              shift, and go to state 46
    SWITCH          shift, and go to state 47
    CASE            shift, and go to state 48
    DEFAULT         shift, and go to state 49
    BREAK           shift, and go to state 50
    RETURN          shift, and go to state 51
    '{'             shift, and go to state 52

    instruction  go to state 168
    iteration    go to state 56
    selection    go to state 57
    saut         go to state 58
    affectation  go to state 59
    bloc         go to state 60
    appel        go to state 61
    variable     go to state 62
    tableu       go to state 63


State 168

   31 iteration: FOR $@4 '(' affectation ';' condition ';' affectation ')' instruction .

    $default  reduce using rule 31 (iteration)
