Rules useless in parser due to conflicts

   36 $@7: %empty


State 2 conflicts: 2 shift/reduce
State 45 conflicts: 1 reduce/reduce


Grammar

    0 $accept: programme $end

    1 programme: liste_declarations liste_fonctions

    2 liste_declarations: liste_declarations declaration
    3                   | %empty

    4 liste_fonctions: liste_fonctions fonction
    5                | %empty

    6 declaration: type liste_declarateurs ';'

    7 liste_declarateurs: liste_declarateurs ',' declarateur
    8                   | declarateur

    9 declarateur: IDENTIFICATEUR

   10 $@1: %empty

   11 declarateur: declarateur '[' CONSTANTE $@1 ']'

   12 $@2: %empty

   13 fonction: type IDENTIFICATEUR $@2 '(' liste_parms ')' '{' liste_declarations liste_instructions '}'

   14 $@3: %empty

   15 fonction: EXTERN type IDENTIFICATEUR $@3 '(' liste_parms ')' ';'

   16 type: VOID
   17     | INT

   18 liste_parms: liste_parms ',' parm
   19            | parm
   20            | %empty

   21 parm: INT IDENTIFICATEUR

   22 liste_instructions: liste_instructions instruction
   23                   | %empty

   24 instruction: affectation ';'
   25            | iteration
   26            | selection
   27            | saut
   28            | appel
   29            | bloc

   30 $@4: %empty

   31 iteration: FOR $@4 '(' affectation ';' condition ';' affectation ')' instruction

   32 $@5: %empty

   33 iteration: WHILE $@5 '(' condition ')' instruction

   34 $@6: %empty

   35 selection: IF $@6 '(' condition ')' instruction

   36 $@7: %empty

   37 selection: IF $@7 '(' condition ')' instruction ELSE instruction

   38 $@8: %empty

   39 selection: SWITCH $@8 '(' expression ')' instruction

   40 $@9: %empty

   41 selection: CASE $@9 CONSTANTE ':' instruction

   42 $@10: %empty

   43 selection: DEFAULT $@10 ':' instruction

   44 $@11: %empty

   45 saut: BREAK $@11 ';'

   46 $@12: %empty

   47 saut: RETURN $@12 ';'

   48 $@13: %empty

   49 saut: RETURN $@13 expression ';'

   50 affectation: variable '=' expression

   51 bloc: '{' liste_declarations liste_instructions '}'

   52 appel: IDENTIFICATEUR '(' liste_expressions ')' ';'

   53 variable: IDENTIFICATEUR
   54         | variable '[' expression ']'

   55 expression: '(' expression ')'
   56           | expression binary_op expression
   57           | MOINS expression
   58           | CONSTANTE
   59           | variable
   60           | IDENTIFICATEUR '(' liste_expressions ')'

   61 liste_expressions: liste_expressions ',' expression
   62                  | expression
   63                  | %empty

   64 condition: NOT '(' condition ')'
   65          | condition binary_rel condition
   66          | '(' condition ')'
   67          | expression binary_comp expression

   68 binary_op: PLUS
   69          | MOINS
   70          | MUL
   71          | DIV
   72          | LSHIFT
   73          | RSHIFT
   74          | BAND
   75          | BOR

   76 binary_rel: LAND
   77           | LOR

   78 binary_comp: LT
   79            | GT
   80            | GEQ
   81            | LEQ
   82            | EQ
   83            | NEQ


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 13 15 31 33 35 37 39 52 55 60 64 66
    ')' (41) 13 15 31 33 35 37 39 52 55 60 64 66
    ',' (44) 7 18 61
    ':' (58) 41 43
    ';' (59) 6 15 24 31 45 47 49 52
    '=' (61) 50
    '[' (91) 11 54
    ']' (93) 11 54
    '{' (123) 13 51
    '}' (125) 13 51
    error (256)
    IDENTIFICATEUR (258) 9 13 15 21 52 53 60
    CONSTANTE (259) 11 41 58
    VOID (260) 16
    INT (261) 17 21
    FOR (262) 31
    WHILE (263) 33
    IF (264) 35 37
    ELSE (265) 37
    SWITCH (266) 39
    CASE (267) 41
    DEFAULT (268) 43
    BREAK (269) 45
    RETURN (270) 47 49
    PLUS (271) 68
    MOINS (272) 57 69
    MUL (273) 70
    DIV (274) 71
    LSHIFT (275) 72
    RSHIFT (276) 73
    BAND (277) 74
    BOR (278) 75
    LAND (279) 76
    LOR (280) 77
    LT (281) 78
    GT (282) 79
    EXTERN (283) 15
    GEQ (284) 80
    LEQ (285) 81
    EQ (286) 82
    NEQ (287) 83
    NOT (288) 64
    THEN (289)
    OP (290)
    REL (291)


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    programme (48)
        on left: 1
        on right: 0
    liste_declarations (49)
        on left: 2 3
        on right: 1 2 13 51
    liste_fonctions (50)
        on left: 4 5
        on right: 1 4
    declaration (51)
        on left: 6
        on right: 2
    liste_declarateurs (52)
        on left: 7 8
        on right: 6 7
    declarateur (53)
        on left: 9 11
        on right: 7 8 11
    $@1 (54)
        on left: 10
        on right: 11
    fonction (55)
        on left: 13 15
        on right: 4
    $@2 (56)
        on left: 12
        on right: 13
    $@3 (57)
        on left: 14
        on right: 15
    type (58)
        on left: 16 17
        on right: 6 13 15
    liste_parms (59)
        on left: 18 19 20
        on right: 13 15 18
    parm (60)
        on left: 21
        on right: 18 19
    liste_instructions (61)
        on left: 22 23
        on right: 13 22 51
    instruction (62)
        on left: 24 25 26 27 28 29
        on right: 22 31 33 35 37 39 41 43
    iteration (63)
        on left: 31 33
        on right: 25
    $@4 (64)
        on left: 30
        on right: 31
    $@5 (65)
        on left: 32
        on right: 33
    selection (66)
        on left: 35 37 39 41 43
        on right: 26
    $@6 (67)
        on left: 34
        on right: 35
    $@7 (68)
        on left: 36
        on right: 37
    $@8 (69)
        on left: 38
        on right: 39
    $@9 (70)
        on left: 40
        on right: 41
    $@10 (71)
        on left: 42
        on right: 43
    saut (72)
        on left: 45 47 49
        on right: 27
    $@11 (73)
        on left: 44
        on right: 45
    $@12 (74)
        on left: 46
        on right: 47
    $@13 (75)
        on left: 48
        on right: 49
    affectation (76)
        on left: 50
        on right: 24 31
    bloc (77)
        on left: 51
        on right: 29
    appel (78)
        on left: 52
        on right: 28
    variable (79)
        on left: 53 54
        on right: 50 54 59
    expression (80)
        on left: 55 56 57 58 59 60
        on right: 39 49 50 54 55 56 57 61 62 67
    liste_expressions (81)
        on left: 61 62 63
        on right: 52 60 61
    condition (82)
        on left: 64 65 66 67
        on right: 31 33 35 37 64 65 66
    binary_op (83)
        on left: 68 69 70 71 72 73 74 75
        on right: 56
    binary_rel (84)
        on left: 76 77
        on right: 65
    binary_comp (85)
        on left: 78 79 80 81 82 83
        on right: 67


State 0

    0 $accept: . programme $end

    $default  reduce using rule 3 (liste_declarations)

    programme           go to state 1
    liste_declarations  go to state 2


State 1

    0 $accept: programme . $end

    $end  shift, and go to state 3


State 2

    1 programme: liste_declarations . liste_fonctions
    2 liste_declarations: liste_declarations . declaration

    VOID  shift, and go to state 4
    INT   shift, and go to state 5

    VOID      [reduce using rule 5 (liste_fonctions)]
    INT       [reduce using rule 5 (liste_fonctions)]
    $default  reduce using rule 5 (liste_fonctions)

    liste_fonctions  go to state 6
    declaration      go to state 7
    type             go to state 8


State 3

    0 $accept: programme $end .

    $default  accept


State 4

   16 type: VOID .

    $default  reduce using rule 16 (type)


State 5

   17 type: INT .

    $default  reduce using rule 17 (type)


State 6

    1 programme: liste_declarations liste_fonctions .
    4 liste_fonctions: liste_fonctions . fonction

    VOID    shift, and go to state 4
    INT     shift, and go to state 5
    EXTERN  shift, and go to state 9

    $default  reduce using rule 1 (programme)

    fonction  go to state 10
    type      go to state 11


State 7

    2 liste_declarations: liste_declarations declaration .

    $default  reduce using rule 2 (liste_declarations)


State 8

    6 declaration: type . liste_declarateurs ';'

    IDENTIFICATEUR  shift, and go to state 12

    liste_declarateurs  go to state 13
    declarateur         go to state 14


State 9

   15 fonction: EXTERN . type IDENTIFICATEUR $@3 '(' liste_parms ')' ';'

    VOID  shift, and go to state 4
    INT   shift, and go to state 5

    type  go to state 15


State 10

    4 liste_fonctions: liste_fonctions fonction .

    $default  reduce using rule 4 (liste_fonctions)


State 11

   13 fonction: type . IDENTIFICATEUR $@2 '(' liste_parms ')' '{' liste_declarations liste_instructions '}'

    IDENTIFICATEUR  shift, and go to state 16


State 12

    9 declarateur: IDENTIFICATEUR .

    $default  reduce using rule 9 (declarateur)


State 13

    6 declaration: type liste_declarateurs . ';'
    7 liste_declarateurs: liste_declarateurs . ',' declarateur

    ';'  shift, and go to state 17
    ','  shift, and go to state 18


State 14

    8 liste_declarateurs: declarateur .
   11 declarateur: declarateur . '[' CONSTANTE $@1 ']'

    '['  shift, and go to state 19

    $default  reduce using rule 8 (liste_declarateurs)


State 15

   15 fonction: EXTERN type . IDENTIFICATEUR $@3 '(' liste_parms ')' ';'

    IDENTIFICATEUR  shift, and go to state 20


State 16

   13 fonction: type IDENTIFICATEUR . $@2 '(' liste_parms ')' '{' liste_declarations liste_instructions '}'

    $default  reduce using rule 12 ($@2)

    $@2  go to state 21


State 17

    6 declaration: type liste_declarateurs ';' .

    $default  reduce using rule 6 (declaration)


State 18

    7 liste_declarateurs: liste_declarateurs ',' . declarateur

    IDENTIFICATEUR  shift, and go to state 12

    declarateur  go to state 22


State 19

   11 declarateur: declarateur '[' . CONSTANTE $@1 ']'

    CONSTANTE  shift, and go to state 23


State 20

   15 fonction: EXTERN type IDENTIFICATEUR . $@3 '(' liste_parms ')' ';'

    $default  reduce using rule 14 ($@3)

    $@3  go to state 24


State 21

   13 fonction: type IDENTIFICATEUR $@2 . '(' liste_parms ')' '{' liste_declarations liste_instructions '}'

    '('  shift, and go to state 25


State 22

    7 liste_declarateurs: liste_declarateurs ',' declarateur .
   11 declarateur: declarateur . '[' CONSTANTE $@1 ']'

    '['  shift, and go to state 19

    $default  reduce using rule 7 (liste_declarateurs)


State 23

   11 declarateur: declarateur '[' CONSTANTE . $@1 ']'

    $default  reduce using rule 10 ($@1)

    $@1  go to state 26


State 24

   15 fonction: EXTERN type IDENTIFICATEUR $@3 . '(' liste_parms ')' ';'

    '('  shift, and go to state 27


State 25

   13 fonction: type IDENTIFICATEUR $@2 '(' . liste_parms ')' '{' liste_declarations liste_instructions '}'

    INT  shift, and go to state 28

    $default  reduce using rule 20 (liste_parms)

    liste_parms  go to state 29
    parm         go to state 30


State 26

   11 declarateur: declarateur '[' CONSTANTE $@1 . ']'

    ']'  shift, and go to state 31


State 27

   15 fonction: EXTERN type IDENTIFICATEUR $@3 '(' . liste_parms ')' ';'

    INT  shift, and go to state 28

    $default  reduce using rule 20 (liste_parms)

    liste_parms  go to state 32
    parm         go to state 30


State 28

   21 parm: INT . IDENTIFICATEUR

    IDENTIFICATEUR  shift, and go to state 33


State 29

   13 fonction: type IDENTIFICATEUR $@2 '(' liste_parms . ')' '{' liste_declarations liste_instructions '}'
   18 liste_parms: liste_parms . ',' parm

    ','  shift, and go to state 34
    ')'  shift, and go to state 35


State 30

   19 liste_parms: parm .

    $default  reduce using rule 19 (liste_parms)


State 31

   11 declarateur: declarateur '[' CONSTANTE $@1 ']' .

    $default  reduce using rule 11 (declarateur)


State 32

   15 fonction: EXTERN type IDENTIFICATEUR $@3 '(' liste_parms . ')' ';'
   18 liste_parms: liste_parms . ',' parm

    ','  shift, and go to state 34
    ')'  shift, and go to state 36


State 33

   21 parm: INT IDENTIFICATEUR .

    $default  reduce using rule 21 (parm)


State 34

   18 liste_parms: liste_parms ',' . parm

    INT  shift, and go to state 28

    parm  go to state 37


State 35

   13 fonction: type IDENTIFICATEUR $@2 '(' liste_parms ')' . '{' liste_declarations liste_instructions '}'

    '{'  shift, and go to state 38


State 36

   15 fonction: EXTERN type IDENTIFICATEUR $@3 '(' liste_parms ')' . ';'

    ';'  shift, and go to state 39


State 37

   18 liste_parms: liste_parms ',' parm .

    $default  reduce using rule 18 (liste_parms)


State 38

   13 fonction: type IDENTIFICATEUR $@2 '(' liste_parms ')' '{' . liste_declarations liste_instructions '}'

    $default  reduce using rule 3 (liste_declarations)

    liste_declarations  go to state 40


State 39

   15 fonction: EXTERN type IDENTIFICATEUR $@3 '(' liste_parms ')' ';' .

    $default  reduce using rule 15 (fonction)


State 40

    2 liste_declarations: liste_declarations . declaration
   13 fonction: type IDENTIFICATEUR $@2 '(' liste_parms ')' '{' liste_declarations . liste_instructions '}'

    VOID  shift, and go to state 4
    INT   shift, and go to state 5

    $default  reduce using rule 23 (liste_instructions)

    declaration         go to state 7
    type                go to state 8
    liste_instructions  go to state 41


State 41

   13 fonction: type IDENTIFICATEUR $@2 '(' liste_parms ')' '{' liste_declarations liste_instructions . '}'
   22 liste_instructions: liste_instructions . instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51
    '}'             shift, and go to state 52

    instruction  go to state 53
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 42

   52 appel: IDENTIFICATEUR . '(' liste_expressions ')' ';'
   53 variable: IDENTIFICATEUR .

    '('  shift, and go to state 61

    $default  reduce using rule 53 (variable)


State 43

   31 iteration: FOR . $@4 '(' affectation ';' condition ';' affectation ')' instruction

    $default  reduce using rule 30 ($@4)

    $@4  go to state 62


State 44

   33 iteration: WHILE . $@5 '(' condition ')' instruction

    $default  reduce using rule 32 ($@5)

    $@5  go to state 63


State 45

   35 selection: IF . $@6 '(' condition ')' instruction
   37          | IF . $@7 '(' condition ')' instruction ELSE instruction

    '('       reduce using rule 34 ($@6)
    '('       [reduce using rule 36 ($@7)]
    $default  reduce using rule 34 ($@6)

    $@6  go to state 64
    $@7  go to state 65


State 46

   39 selection: SWITCH . $@8 '(' expression ')' instruction

    $default  reduce using rule 38 ($@8)

    $@8  go to state 66


State 47

   41 selection: CASE . $@9 CONSTANTE ':' instruction

    $default  reduce using rule 40 ($@9)

    $@9  go to state 67


State 48

   43 selection: DEFAULT . $@10 ':' instruction

    $default  reduce using rule 42 ($@10)

    $@10  go to state 68


State 49

   45 saut: BREAK . $@11 ';'

    $default  reduce using rule 44 ($@11)

    $@11  go to state 69


State 50

   47 saut: RETURN . $@12 ';'
   49     | RETURN . $@13 expression ';'

    ';'       reduce using rule 46 ($@12)
    $default  reduce using rule 48 ($@13)

    $@12  go to state 70
    $@13  go to state 71


State 51

   51 bloc: '{' . liste_declarations liste_instructions '}'

    $default  reduce using rule 3 (liste_declarations)

    liste_declarations  go to state 72


State 52

   13 fonction: type IDENTIFICATEUR $@2 '(' liste_parms ')' '{' liste_declarations liste_instructions '}' .

    $default  reduce using rule 13 (fonction)


State 53

   22 liste_instructions: liste_instructions instruction .

    $default  reduce using rule 22 (liste_instructions)


State 54

   25 instruction: iteration .

    $default  reduce using rule 25 (instruction)


State 55

   26 instruction: selection .

    $default  reduce using rule 26 (instruction)


State 56

   27 instruction: saut .

    $default  reduce using rule 27 (instruction)


State 57

   24 instruction: affectation . ';'

    ';'  shift, and go to state 73


State 58

   29 instruction: bloc .

    $default  reduce using rule 29 (instruction)


State 59

   28 instruction: appel .

    $default  reduce using rule 28 (instruction)


State 60

   50 affectation: variable . '=' expression
   54 variable: variable . '[' expression ']'

    '['  shift, and go to state 74
    '='  shift, and go to state 75


State 61

   52 appel: IDENTIFICATEUR '(' . liste_expressions ')' ';'

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    '('             shift, and go to state 79

    $default  reduce using rule 63 (liste_expressions)

    variable           go to state 80
    expression         go to state 81
    liste_expressions  go to state 82


State 62

   31 iteration: FOR $@4 . '(' affectation ';' condition ';' affectation ')' instruction

    '('  shift, and go to state 83


State 63

   33 iteration: WHILE $@5 . '(' condition ')' instruction

    '('  shift, and go to state 84


State 64

   35 selection: IF $@6 . '(' condition ')' instruction

    '('  shift, and go to state 85


State 65

   37 selection: IF $@7 . '(' condition ')' instruction ELSE instruction

    '('  shift, and go to state 86


State 66

   39 selection: SWITCH $@8 . '(' expression ')' instruction

    '('  shift, and go to state 87


State 67

   41 selection: CASE $@9 . CONSTANTE ':' instruction

    CONSTANTE  shift, and go to state 88


State 68

   43 selection: DEFAULT $@10 . ':' instruction

    ':'  shift, and go to state 89


State 69

   45 saut: BREAK $@11 . ';'

    ';'  shift, and go to state 90


State 70

   47 saut: RETURN $@12 . ';'

    ';'  shift, and go to state 91


State 71

   49 saut: RETURN $@13 . expression ';'

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    '('             shift, and go to state 79

    variable    go to state 80
    expression  go to state 92


State 72

    2 liste_declarations: liste_declarations . declaration
   51 bloc: '{' liste_declarations . liste_instructions '}'

    VOID  shift, and go to state 4
    INT   shift, and go to state 5

    $default  reduce using rule 23 (liste_instructions)

    declaration         go to state 7
    type                go to state 8
    liste_instructions  go to state 93


State 73

   24 instruction: affectation ';' .

    $default  reduce using rule 24 (instruction)


State 74

   54 variable: variable '[' . expression ']'

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    '('             shift, and go to state 79

    variable    go to state 80
    expression  go to state 94


State 75

   50 affectation: variable '=' . expression

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    '('             shift, and go to state 79

    variable    go to state 80
    expression  go to state 95


State 76

   53 variable: IDENTIFICATEUR .
   60 expression: IDENTIFICATEUR . '(' liste_expressions ')'

    '('  shift, and go to state 96

    $default  reduce using rule 53 (variable)


State 77

   58 expression: CONSTANTE .

    $default  reduce using rule 58 (expression)


State 78

   57 expression: MOINS . expression

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    '('             shift, and go to state 79

    variable    go to state 80
    expression  go to state 97


State 79

   55 expression: '(' . expression ')'

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    '('             shift, and go to state 79

    variable    go to state 80
    expression  go to state 98


State 80

   54 variable: variable . '[' expression ']'
   59 expression: variable .

    '['  shift, and go to state 74

    $default  reduce using rule 59 (expression)


State 81

   56 expression: expression . binary_op expression
   62 liste_expressions: expression .

    PLUS    shift, and go to state 99
    MOINS   shift, and go to state 100
    MUL     shift, and go to state 101
    DIV     shift, and go to state 102
    LSHIFT  shift, and go to state 103
    RSHIFT  shift, and go to state 104
    BAND    shift, and go to state 105
    BOR     shift, and go to state 106

    $default  reduce using rule 62 (liste_expressions)

    binary_op  go to state 107


State 82

   52 appel: IDENTIFICATEUR '(' liste_expressions . ')' ';'
   61 liste_expressions: liste_expressions . ',' expression

    ','  shift, and go to state 108
    ')'  shift, and go to state 109


State 83

   31 iteration: FOR $@4 '(' . affectation ';' condition ';' affectation ')' instruction

    IDENTIFICATEUR  shift, and go to state 110

    affectation  go to state 111
    variable     go to state 60


State 84

   33 iteration: WHILE $@5 '(' . condition ')' instruction

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    NOT             shift, and go to state 112
    '('             shift, and go to state 113

    variable    go to state 80
    expression  go to state 114
    condition   go to state 115


State 85

   35 selection: IF $@6 '(' . condition ')' instruction

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    NOT             shift, and go to state 112
    '('             shift, and go to state 113

    variable    go to state 80
    expression  go to state 114
    condition   go to state 116


State 86

   37 selection: IF $@7 '(' . condition ')' instruction ELSE instruction

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    NOT             shift, and go to state 112
    '('             shift, and go to state 113

    variable    go to state 80
    expression  go to state 114
    condition   go to state 117


State 87

   39 selection: SWITCH $@8 '(' . expression ')' instruction

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    '('             shift, and go to state 79

    variable    go to state 80
    expression  go to state 118


State 88

   41 selection: CASE $@9 CONSTANTE . ':' instruction

    ':'  shift, and go to state 119


State 89

   43 selection: DEFAULT $@10 ':' . instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51

    instruction  go to state 120
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 90

   45 saut: BREAK $@11 ';' .

    $default  reduce using rule 45 (saut)


State 91

   47 saut: RETURN $@12 ';' .

    $default  reduce using rule 47 (saut)


State 92

   49 saut: RETURN $@13 expression . ';'
   56 expression: expression . binary_op expression

    PLUS    shift, and go to state 99
    MOINS   shift, and go to state 100
    MUL     shift, and go to state 101
    DIV     shift, and go to state 102
    LSHIFT  shift, and go to state 103
    RSHIFT  shift, and go to state 104
    BAND    shift, and go to state 105
    BOR     shift, and go to state 106
    ';'     shift, and go to state 121

    binary_op  go to state 107


State 93

   22 liste_instructions: liste_instructions . instruction
   51 bloc: '{' liste_declarations liste_instructions . '}'

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51
    '}'             shift, and go to state 122

    instruction  go to state 53
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 94

   54 variable: variable '[' expression . ']'
   56 expression: expression . binary_op expression

    PLUS    shift, and go to state 99
    MOINS   shift, and go to state 100
    MUL     shift, and go to state 101
    DIV     shift, and go to state 102
    LSHIFT  shift, and go to state 103
    RSHIFT  shift, and go to state 104
    BAND    shift, and go to state 105
    BOR     shift, and go to state 106
    ']'     shift, and go to state 123

    binary_op  go to state 107


State 95

   50 affectation: variable '=' expression .
   56 expression: expression . binary_op expression

    PLUS    shift, and go to state 99
    MOINS   shift, and go to state 100
    MUL     shift, and go to state 101
    DIV     shift, and go to state 102
    LSHIFT  shift, and go to state 103
    RSHIFT  shift, and go to state 104
    BAND    shift, and go to state 105
    BOR     shift, and go to state 106

    $default  reduce using rule 50 (affectation)

    binary_op  go to state 107


State 96

   60 expression: IDENTIFICATEUR '(' . liste_expressions ')'

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    '('             shift, and go to state 79

    $default  reduce using rule 63 (liste_expressions)

    variable           go to state 80
    expression         go to state 81
    liste_expressions  go to state 124


State 97

   56 expression: expression . binary_op expression
   57           | MOINS expression .

    MUL     shift, and go to state 101
    DIV     shift, and go to state 102
    LSHIFT  shift, and go to state 103
    RSHIFT  shift, and go to state 104
    BAND    shift, and go to state 105
    BOR     shift, and go to state 106

    $default  reduce using rule 57 (expression)

    binary_op  go to state 107


State 98

   55 expression: '(' expression . ')'
   56           | expression . binary_op expression

    PLUS    shift, and go to state 99
    MOINS   shift, and go to state 100
    MUL     shift, and go to state 101
    DIV     shift, and go to state 102
    LSHIFT  shift, and go to state 103
    RSHIFT  shift, and go to state 104
    BAND    shift, and go to state 105
    BOR     shift, and go to state 106
    ')'     shift, and go to state 125

    binary_op  go to state 107


State 99

   68 binary_op: PLUS .

    $default  reduce using rule 68 (binary_op)


State 100

   69 binary_op: MOINS .

    $default  reduce using rule 69 (binary_op)


State 101

   70 binary_op: MUL .

    $default  reduce using rule 70 (binary_op)


State 102

   71 binary_op: DIV .

    $default  reduce using rule 71 (binary_op)


State 103

   72 binary_op: LSHIFT .

    $default  reduce using rule 72 (binary_op)


State 104

   73 binary_op: RSHIFT .

    $default  reduce using rule 73 (binary_op)


State 105

   74 binary_op: BAND .

    $default  reduce using rule 74 (binary_op)


State 106

   75 binary_op: BOR .

    $default  reduce using rule 75 (binary_op)


State 107

   56 expression: expression binary_op . expression

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    '('             shift, and go to state 79

    variable    go to state 80
    expression  go to state 126


State 108

   61 liste_expressions: liste_expressions ',' . expression

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    '('             shift, and go to state 79

    variable    go to state 80
    expression  go to state 127


State 109

   52 appel: IDENTIFICATEUR '(' liste_expressions ')' . ';'

    ';'  shift, and go to state 128


State 110

   53 variable: IDENTIFICATEUR .

    $default  reduce using rule 53 (variable)


State 111

   31 iteration: FOR $@4 '(' affectation . ';' condition ';' affectation ')' instruction

    ';'  shift, and go to state 129


State 112

   64 condition: NOT . '(' condition ')'

    '('  shift, and go to state 130


State 113

   55 expression: '(' . expression ')'
   66 condition: '(' . condition ')'

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    NOT             shift, and go to state 112
    '('             shift, and go to state 113

    variable    go to state 80
    expression  go to state 131
    condition   go to state 132


State 114

   56 expression: expression . binary_op expression
   67 condition: expression . binary_comp expression

    PLUS    shift, and go to state 99
    MOINS   shift, and go to state 100
    MUL     shift, and go to state 101
    DIV     shift, and go to state 102
    LSHIFT  shift, and go to state 103
    RSHIFT  shift, and go to state 104
    BAND    shift, and go to state 105
    BOR     shift, and go to state 106
    LT      shift, and go to state 133
    GT      shift, and go to state 134
    GEQ     shift, and go to state 135
    LEQ     shift, and go to state 136
    EQ      shift, and go to state 137
    NEQ     shift, and go to state 138

    binary_op    go to state 107
    binary_comp  go to state 139


State 115

   33 iteration: WHILE $@5 '(' condition . ')' instruction
   65 condition: condition . binary_rel condition

    LAND  shift, and go to state 140
    LOR   shift, and go to state 141
    ')'   shift, and go to state 142

    binary_rel  go to state 143


State 116

   35 selection: IF $@6 '(' condition . ')' instruction
   65 condition: condition . binary_rel condition

    LAND  shift, and go to state 140
    LOR   shift, and go to state 141
    ')'   shift, and go to state 144

    binary_rel  go to state 143


State 117

   37 selection: IF $@7 '(' condition . ')' instruction ELSE instruction
   65 condition: condition . binary_rel condition

    LAND  shift, and go to state 140
    LOR   shift, and go to state 141
    ')'   shift, and go to state 145

    binary_rel  go to state 143


State 118

   39 selection: SWITCH $@8 '(' expression . ')' instruction
   56 expression: expression . binary_op expression

    PLUS    shift, and go to state 99
    MOINS   shift, and go to state 100
    MUL     shift, and go to state 101
    DIV     shift, and go to state 102
    LSHIFT  shift, and go to state 103
    RSHIFT  shift, and go to state 104
    BAND    shift, and go to state 105
    BOR     shift, and go to state 106
    ')'     shift, and go to state 146

    binary_op  go to state 107


State 119

   41 selection: CASE $@9 CONSTANTE ':' . instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51

    instruction  go to state 147
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 120

   43 selection: DEFAULT $@10 ':' instruction .

    $default  reduce using rule 43 (selection)


State 121

   49 saut: RETURN $@13 expression ';' .

    $default  reduce using rule 49 (saut)


State 122

   51 bloc: '{' liste_declarations liste_instructions '}' .

    $default  reduce using rule 51 (bloc)


State 123

   54 variable: variable '[' expression ']' .

    $default  reduce using rule 54 (variable)


State 124

   60 expression: IDENTIFICATEUR '(' liste_expressions . ')'
   61 liste_expressions: liste_expressions . ',' expression

    ','  shift, and go to state 108
    ')'  shift, and go to state 148


State 125

   55 expression: '(' expression ')' .

    $default  reduce using rule 55 (expression)


State 126

   56 expression: expression . binary_op expression
   56           | expression binary_op expression .

    $default  reduce using rule 56 (expression)

    binary_op  go to state 107


State 127

   56 expression: expression . binary_op expression
   61 liste_expressions: liste_expressions ',' expression .

    PLUS    shift, and go to state 99
    MOINS   shift, and go to state 100
    MUL     shift, and go to state 101
    DIV     shift, and go to state 102
    LSHIFT  shift, and go to state 103
    RSHIFT  shift, and go to state 104
    BAND    shift, and go to state 105
    BOR     shift, and go to state 106

    $default  reduce using rule 61 (liste_expressions)

    binary_op  go to state 107


State 128

   52 appel: IDENTIFICATEUR '(' liste_expressions ')' ';' .

    $default  reduce using rule 52 (appel)


State 129

   31 iteration: FOR $@4 '(' affectation ';' . condition ';' affectation ')' instruction

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    NOT             shift, and go to state 112
    '('             shift, and go to state 113

    variable    go to state 80
    expression  go to state 114
    condition   go to state 149


State 130

   64 condition: NOT '(' . condition ')'

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    NOT             shift, and go to state 112
    '('             shift, and go to state 113

    variable    go to state 80
    expression  go to state 114
    condition   go to state 150


State 131

   55 expression: '(' expression . ')'
   56           | expression . binary_op expression
   67 condition: expression . binary_comp expression

    PLUS    shift, and go to state 99
    MOINS   shift, and go to state 100
    MUL     shift, and go to state 101
    DIV     shift, and go to state 102
    LSHIFT  shift, and go to state 103
    RSHIFT  shift, and go to state 104
    BAND    shift, and go to state 105
    BOR     shift, and go to state 106
    LT      shift, and go to state 133
    GT      shift, and go to state 134
    GEQ     shift, and go to state 135
    LEQ     shift, and go to state 136
    EQ      shift, and go to state 137
    NEQ     shift, and go to state 138
    ')'     shift, and go to state 125

    binary_op    go to state 107
    binary_comp  go to state 139


State 132

   65 condition: condition . binary_rel condition
   66          | '(' condition . ')'

    LAND  shift, and go to state 140
    LOR   shift, and go to state 141
    ')'   shift, and go to state 151

    binary_rel  go to state 143


State 133

   78 binary_comp: LT .

    $default  reduce using rule 78 (binary_comp)


State 134

   79 binary_comp: GT .

    $default  reduce using rule 79 (binary_comp)


State 135

   80 binary_comp: GEQ .

    $default  reduce using rule 80 (binary_comp)


State 136

   81 binary_comp: LEQ .

    $default  reduce using rule 81 (binary_comp)


State 137

   82 binary_comp: EQ .

    $default  reduce using rule 82 (binary_comp)


State 138

   83 binary_comp: NEQ .

    $default  reduce using rule 83 (binary_comp)


State 139

   67 condition: expression binary_comp . expression

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    '('             shift, and go to state 79

    variable    go to state 80
    expression  go to state 152


State 140

   76 binary_rel: LAND .

    $default  reduce using rule 76 (binary_rel)


State 141

   77 binary_rel: LOR .

    $default  reduce using rule 77 (binary_rel)


State 142

   33 iteration: WHILE $@5 '(' condition ')' . instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51

    instruction  go to state 153
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 143

   65 condition: condition binary_rel . condition

    IDENTIFICATEUR  shift, and go to state 76
    CONSTANTE       shift, and go to state 77
    MOINS           shift, and go to state 78
    NOT             shift, and go to state 112
    '('             shift, and go to state 113

    variable    go to state 80
    expression  go to state 114
    condition   go to state 154


State 144

   35 selection: IF $@6 '(' condition ')' . instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51

    instruction  go to state 155
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 145

   37 selection: IF $@7 '(' condition ')' . instruction ELSE instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51

    instruction  go to state 156
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 146

   39 selection: SWITCH $@8 '(' expression ')' . instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51

    instruction  go to state 157
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 147

   41 selection: CASE $@9 CONSTANTE ':' instruction .

    $default  reduce using rule 41 (selection)


State 148

   60 expression: IDENTIFICATEUR '(' liste_expressions ')' .

    $default  reduce using rule 60 (expression)


State 149

   31 iteration: FOR $@4 '(' affectation ';' condition . ';' affectation ')' instruction
   65 condition: condition . binary_rel condition

    LAND  shift, and go to state 140
    LOR   shift, and go to state 141
    ';'   shift, and go to state 158

    binary_rel  go to state 143


State 150

   64 condition: NOT '(' condition . ')'
   65          | condition . binary_rel condition

    LAND  shift, and go to state 140
    LOR   shift, and go to state 141
    ')'   shift, and go to state 159

    binary_rel  go to state 143


State 151

   66 condition: '(' condition ')' .

    $default  reduce using rule 66 (condition)


State 152

   56 expression: expression . binary_op expression
   67 condition: expression binary_comp expression .

    PLUS    shift, and go to state 99
    MOINS   shift, and go to state 100
    MUL     shift, and go to state 101
    DIV     shift, and go to state 102
    LSHIFT  shift, and go to state 103
    RSHIFT  shift, and go to state 104
    BAND    shift, and go to state 105
    BOR     shift, and go to state 106

    $default  reduce using rule 67 (condition)

    binary_op  go to state 107


State 153

   33 iteration: WHILE $@5 '(' condition ')' instruction .

    $default  reduce using rule 33 (iteration)


State 154

   65 condition: condition . binary_rel condition
   65          | condition binary_rel condition .

    $default  reduce using rule 65 (condition)

    binary_rel  go to state 143


State 155

   35 selection: IF $@6 '(' condition ')' instruction .

    $default  reduce using rule 35 (selection)


State 156

   37 selection: IF $@7 '(' condition ')' instruction . ELSE instruction

    ELSE  shift, and go to state 160


State 157

   39 selection: SWITCH $@8 '(' expression ')' instruction .

    $default  reduce using rule 39 (selection)


State 158

   31 iteration: FOR $@4 '(' affectation ';' condition ';' . affectation ')' instruction

    IDENTIFICATEUR  shift, and go to state 110

    affectation  go to state 161
    variable     go to state 60


State 159

   64 condition: NOT '(' condition ')' .

    $default  reduce using rule 64 (condition)


State 160

   37 selection: IF $@7 '(' condition ')' instruction ELSE . instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51

    instruction  go to state 162
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 161

   31 iteration: FOR $@4 '(' affectation ';' condition ';' affectation . ')' instruction

    ')'  shift, and go to state 163


State 162

   37 selection: IF $@7 '(' condition ')' instruction ELSE instruction .

    $default  reduce using rule 37 (selection)


State 163

   31 iteration: FOR $@4 '(' affectation ';' condition ';' affectation ')' . instruction

    IDENTIFICATEUR  shift, and go to state 42
    FOR             shift, and go to state 43
    WHILE           shift, and go to state 44
    IF              shift, and go to state 45
    SWITCH          shift, and go to state 46
    CASE            shift, and go to state 47
    DEFAULT         shift, and go to state 48
    BREAK           shift, and go to state 49
    RETURN          shift, and go to state 50
    '{'             shift, and go to state 51

    instruction  go to state 164
    iteration    go to state 54
    selection    go to state 55
    saut         go to state 56
    affectation  go to state 57
    bloc         go to state 58
    appel        go to state 59
    variable     go to state 60


State 164

   31 iteration: FOR $@4 '(' affectation ';' condition ';' affectation ')' instruction .

    $default  reduce using rule 31 (iteration)
