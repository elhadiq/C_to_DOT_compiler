Nonterminals useless in grammar

    liste_declarations
    else
    $@13


Terminals unused in grammar

    CHAR
    WHILE
    BREAK
    NOT
    LAND
    LOR
    STR
    INCLUDE


Rules useless in grammar

   88 liste_declarations: liste_declarations declaration
   89                   | declaration

   90 $@13: %empty

   91 else: ELSE $@13 '{' liste_instructions '}'
   92     | %empty


Rules useless in parser due to conflicts

   73 arithmetic: PLUS
   74           | MOINS
   75           | MUL
   76           | DIV


State 13 conflicts: 3 reduce/reduce
State 19 conflicts: 9 shift/reduce, 3 reduce/reduce
State 31 conflicts: 9 shift/reduce, 5 reduce/reduce
State 41 conflicts: 9 shift/reduce, 1 reduce/reduce
State 59 conflicts: 14 reduce/reduce
State 60 conflicts: 28 reduce/reduce
State 67 conflicts: 9 shift/reduce, 1 reduce/reduce
State 96 conflicts: 4 shift/reduce
State 99 conflicts: 4 reduce/reduce
State 100 conflicts: 4 reduce/reduce
State 101 conflicts: 4 reduce/reduce
State 102 conflicts: 4 reduce/reduce
State 103 conflicts: 9 shift/reduce, 1 reduce/reduce
State 126 conflicts: 4 shift/reduce
State 127 conflicts: 4 shift/reduce
State 143 conflicts: 9 shift/reduce, 1 reduce/reduce
State 144 conflicts: 9 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: programme $end

    1 programme: main '(' ')' '{' liste_instructions returne '}'
    2          | externs programme

    3 $@1: %empty

    4 main: datatype IDENTIFICATEUR $@1

    5 externs: externs externe
    6        | externe

    7 $@2: %empty

    8 externe: EXTERN datatype IDENTIFICATEUR $@2 '(' liste_parms ')' ';'

    9 liste_parms: liste_parms ',' parm
   10            | parm
   11            | %empty

   12 $@3: %empty

   13 parm: INT $@3 IDENTIFICATEUR

   14 liste_declarateurs: declarateur ',' liste_declarateurs
   15                   | declarateur
   16                   | declarateur init

   17 declarateur: IDENTIFICATEUR

   18 $@4: %empty

   19 declarateur: declarateur '[' CONSTANTE $@4 ']'

   20 declaration: datatype liste_declarateurs ';'

   21 datatype: INT
   22         | VOID

   23 liste_instructions: instruction liste_instructions
   24                   | instruction
   25                   | %empty

   26 instruction: %empty

   27 $@5: %empty

   28 instruction: FOR $@5 '(' instruction1 ';' condition ';' instruction1 ')' instruction
   29            | selection
   30            | instruction1 ';'
   31            | appel
   32            | declaration

   33 instruction1: %empty

   34 $@6: %empty

   35 instruction1: IDENTIFICATEUR $@6 '=' expression

   36 $@7: %empty

   37 instruction1: IDENTIFICATEUR $@7 relop expression

   38 $@8: %empty

   39 instruction1: IDENTIFICATEUR $@8 UNARY
   40             | UNARY IDENTIFICATEUR

   41 init: '=' valeur

   42 $@9: %empty

   43 $@10: %empty

   44 $@11: %empty

   45 selection: IF $@9 '(' condition ')' $@10 instruction $@11 ELSE instruction
   46          | SWITCH '(' expression ')' instruction
   47          | CASE CONSTANTE ':' instruction
   48          | DEFAULT ':' instruction

   49 appel: IDENTIFICATEUR '(' liste_expressions ')' ';'

   50 variable: IDENTIFICATEUR
   51         | tableu

   52 tableu: tableu '[' expression ']'
   53       | IDENTIFICATEUR

   54 expression: '(' expression ')'
   55           | expression binary_op expression
   56           | MOINS expression

   57 $@12: %empty

   58 expression: CONSTANTE $@12
   59           | variable
   60           | IDENTIFICATEUR '(' liste_expressions ')'

   61 liste_expressions: liste_expressions ',' expression
   62                  | expression

   63 binary_op: PLUS
   64          | MOINS
   65          | MUL
   66          | DIV

   67 condition: expression relop expression
   68          | TRUE
   69          | FALSE
   70          | %empty

   71 expression: expression arithmetic expression
   72           | valeur

   73 arithmetic: PLUS
   74           | MOINS
   75           | MUL
   76           | DIV

   77 relop: LT
   78      | GT
   79      | LEQ
   80      | GEQ
   81      | EQ
   82      | NEQ

   83 valeur: CONSTANTE
   84       | IDENTIFICATEUR

   85 returne: RETURN expression ';'
   86        | RETURN ';'
   87        | %empty


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 1 8 28 45 46 49 54 60
    ')' (41) 1 8 28 45 46 49 54 60
    ',' (44) 9 14 61
    ':' (58) 47 48
    ';' (59) 8 20 28 30 49 85 86
    '=' (61) 35 41
    '[' (91) 19 52
    ']' (93) 19 52
    '{' (123) 1
    '}' (125) 1
    error (256)
    VOID (258) 22
    EXTERN <nd_obj> (259) 8
    INT <nd_obj> (260) 13 21
    CHAR <nd_obj> (261)
    FOR <nd_obj> (262) 28
    WHILE <nd_obj> (263)
    SWITCH <nd_obj> (264) 46
    CASE <nd_obj> (265) 47
    DEFAULT <nd_obj> (266) 48
    BREAK <nd_obj> (267)
    IF <nd_obj> (268) 45
    ELSE <nd_obj> (269) 45
    TRUE <nd_obj> (270) 68
    FALSE <nd_obj> (271) 69
    CONSTANTE <nd_obj> (272) 19 47 58 83
    IDENTIFICATEUR <nd_obj> (273) 4 8 13 17 35 37 39 40 49 50 53 60 84
    LEQ <nd_obj> (274) 79
    GEQ <nd_obj> (275) 80
    EQ <nd_obj> (276) 81
    NOT <nd_obj> (277)
    GT <nd_obj> (278) 78
    LT <nd_obj> (279) 77
    LAND <nd_obj> (280)
    LOR <nd_obj> (281)
    NEQ <nd_obj> (282) 82
    STR <nd_obj> (283)
    PLUS <nd_obj> (284) 63 73
    MUL <nd_obj> (285) 65 75
    DIV <nd_obj> (286) 66 76
    MOINS <nd_obj> (287) 56 64 74
    UNARY <nd_obj> (288) 39 40
    INCLUDE <nd_obj> (289)
    RETURN <nd_obj> (290) 85 86
    OP (291)


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    programme <nd_obj> (48)
        on left: 1 2
        on right: 0 2
    main <nd_obj> (49)
        on left: 4
        on right: 1
    $@1 (50)
        on left: 3
        on right: 4
    externs <nd_obj> (51)
        on left: 5 6
        on right: 2 5
    externe <nd_obj> (52)
        on left: 8
        on right: 5 6
    $@2 (53)
        on left: 7
        on right: 8
    liste_parms (54)
        on left: 9 10 11
        on right: 8 9
    parm (55)
        on left: 13
        on right: 9 10
    $@3 (56)
        on left: 12
        on right: 13
    liste_declarateurs <nd_obj> (57)
        on left: 14 15 16
        on right: 14 20
    declarateur <nd_obj> (58)
        on left: 17 19
        on right: 14 15 16 19
    $@4 (59)
        on left: 18
        on right: 19
    declaration <nd_obj> (60)
        on left: 20
        on right: 32
    datatype <nd_obj> (61)
        on left: 21 22
        on right: 4 8 20
    liste_instructions <nd_obj> (62)
        on left: 23 24 25
        on right: 1 23
    instruction <nd_obj> (63)
        on left: 26 28 29 30 31 32
        on right: 23 24 28 45 46 47 48
    $@5 (64)
        on left: 27
        on right: 28
    instruction1 <nd_obj> (65)
        on left: 33 35 37 39 40
        on right: 28 30
    $@6 (66)
        on left: 34
        on right: 35
    $@7 (67)
        on left: 36
        on right: 37
    $@8 (68)
        on left: 38
        on right: 39
    init <nd_obj2> (69)
        on left: 41
        on right: 16
    selection <nd_obj> (70)
        on left: 45 46 47 48
        on right: 29
    $@9 (71)
        on left: 42
        on right: 45
    $@10 (72)
        on left: 43
        on right: 45
    $@11 (73)
        on left: 44
        on right: 45
    appel <nd_obj> (74)
        on left: 49
        on right: 31
    variable <nd_obj2> (75)
        on left: 50 51
        on right: 59
    tableu <nd_obj> (76)
        on left: 52 53
        on right: 51 52
    expression <nd_obj2> (77)
        on left: 54 55 56 58 59 60 71 72
        on right: 35 37 46 52 54 55 56 61 62 67 71 85
    $@12 (78)
        on left: 57
        on right: 58
    liste_expressions <nd_obj> (79)
        on left: 61 62
        on right: 49 60 61
    binary_op <nd_obj> (80)
        on left: 63 64 65 66
        on right: 55
    condition <nd_obj3> (81)
        on left: 67 68 69 70
        on right: 28 45
    arithmetic <nd_obj> (82)
        on left: 73 74 75 76
        on right: 71
    relop <nd_obj> (83)
        on left: 77 78 79 80 81 82
        on right: 37 67
    valeur <nd_obj2> (84)
        on left: 83 84
        on right: 41 72
    returne <nd_obj> (85)
        on left: 85 86 87
        on right: 1


State 0

    0 $accept: . programme $end

    VOID    shift, and go to state 1
    EXTERN  shift, and go to state 2
    INT     shift, and go to state 3

    programme  go to state 4
    main       go to state 5
    externs    go to state 6
    externe    go to state 7
    datatype   go to state 8


State 1

   22 datatype: VOID .

    $default  reduce using rule 22 (datatype)


State 2

    8 externe: EXTERN . datatype IDENTIFICATEUR $@2 '(' liste_parms ')' ';'

    VOID  shift, and go to state 1
    INT   shift, and go to state 3

    datatype  go to state 9


State 3

   21 datatype: INT .

    $default  reduce using rule 21 (datatype)


State 4

    0 $accept: programme . $end

    $end  shift, and go to state 10


State 5

    1 programme: main . '(' ')' '{' liste_instructions returne '}'

    '('  shift, and go to state 11


State 6

    2 programme: externs . programme
    5 externs: externs . externe

    VOID    shift, and go to state 1
    EXTERN  shift, and go to state 2
    INT     shift, and go to state 3

    programme  go to state 12
    main       go to state 5
    externs    go to state 6
    externe    go to state 13
    datatype   go to state 8


State 7

    6 externs: externe .

    $default  reduce using rule 6 (externs)


State 8

    4 main: datatype . IDENTIFICATEUR $@1

    IDENTIFICATEUR  shift, and go to state 14


State 9

    8 externe: EXTERN datatype . IDENTIFICATEUR $@2 '(' liste_parms ')' ';'

    IDENTIFICATEUR  shift, and go to state 15


State 10

    0 $accept: programme $end .

    $default  accept


State 11

    1 programme: main '(' . ')' '{' liste_instructions returne '}'

    ')'  shift, and go to state 16


State 12

    2 programme: externs programme .

    $default  reduce using rule 2 (programme)


State 13

    5 externs: externs externe .
    6        | externe .

    VOID      reduce using rule 5 (externs)
    VOID      [reduce using rule 6 (externs)]
    EXTERN    reduce using rule 5 (externs)
    EXTERN    [reduce using rule 6 (externs)]
    INT       reduce using rule 5 (externs)
    INT       [reduce using rule 6 (externs)]
    $default  reduce using rule 5 (externs)


State 14

    4 main: datatype IDENTIFICATEUR . $@1

    $default  reduce using rule 3 ($@1)

    $@1  go to state 17


State 15

    8 externe: EXTERN datatype IDENTIFICATEUR . $@2 '(' liste_parms ')' ';'

    $default  reduce using rule 7 ($@2)

    $@2  go to state 18


State 16

    1 programme: main '(' ')' . '{' liste_instructions returne '}'

    '{'  shift, and go to state 19


State 17

    4 main: datatype IDENTIFICATEUR $@1 .

    $default  reduce using rule 4 (main)


State 18

    8 externe: EXTERN datatype IDENTIFICATEUR $@2 . '(' liste_parms ')' ';'

    '('  shift, and go to state 20


State 19

    1 programme: main '(' ')' '{' . liste_instructions returne '}'

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 21
    SWITCH          shift, and go to state 22
    CASE            shift, and go to state 23
    DEFAULT         shift, and go to state 24
    IF              shift, and go to state 25
    IDENTIFICATEUR  shift, and go to state 26
    UNARY           shift, and go to state 27

    VOID            [reduce using rule 26 (instruction)]
    INT             [reduce using rule 26 (instruction)]
    FOR             [reduce using rule 26 (instruction)]
    SWITCH          [reduce using rule 26 (instruction)]
    CASE            [reduce using rule 26 (instruction)]
    DEFAULT         [reduce using rule 26 (instruction)]
    IF              [reduce using rule 26 (instruction)]
    IDENTIFICATEUR  [reduce using rule 26 (instruction)]
    UNARY           [reduce using rule 26 (instruction)]
    RETURN          reduce using rule 25 (liste_instructions)
    RETURN          [reduce using rule 26 (instruction)]
    '}'             reduce using rule 25 (liste_instructions)
    '}'             [reduce using rule 26 (instruction)]
    ';'             reduce using rule 26 (instruction)
    ';'             [reduce using rule 33 (instruction1)]
    $default        reduce using rule 25 (liste_instructions)

    declaration         go to state 28
    datatype            go to state 29
    liste_instructions  go to state 30
    instruction         go to state 31
    instruction1        go to state 32
    selection           go to state 33
    appel               go to state 34


State 20

    8 externe: EXTERN datatype IDENTIFICATEUR $@2 '(' . liste_parms ')' ';'

    INT  shift, and go to state 35

    $default  reduce using rule 11 (liste_parms)

    liste_parms  go to state 36
    parm         go to state 37


State 21

   28 instruction: FOR . $@5 '(' instruction1 ';' condition ';' instruction1 ')' instruction

    $default  reduce using rule 27 ($@5)

    $@5  go to state 38


State 22

   46 selection: SWITCH . '(' expression ')' instruction

    '('  shift, and go to state 39


State 23

   47 selection: CASE . CONSTANTE ':' instruction

    CONSTANTE  shift, and go to state 40


State 24

   48 selection: DEFAULT . ':' instruction

    ':'  shift, and go to state 41


State 25

   45 selection: IF . $@9 '(' condition ')' $@10 instruction $@11 ELSE instruction

    $default  reduce using rule 42 ($@9)

    $@9  go to state 42


State 26

   35 instruction1: IDENTIFICATEUR . $@6 '=' expression
   37             | IDENTIFICATEUR . $@7 relop expression
   39             | IDENTIFICATEUR . $@8 UNARY
   49 appel: IDENTIFICATEUR . '(' liste_expressions ')' ';'

    '('  shift, and go to state 43

    UNARY     reduce using rule 38 ($@8)
    '='       reduce using rule 34 ($@6)
    $default  reduce using rule 36 ($@7)

    $@6  go to state 44
    $@7  go to state 45
    $@8  go to state 46


State 27

   40 instruction1: UNARY . IDENTIFICATEUR

    IDENTIFICATEUR  shift, and go to state 47


State 28

   32 instruction: declaration .

    $default  reduce using rule 32 (instruction)


State 29

   20 declaration: datatype . liste_declarateurs ';'

    IDENTIFICATEUR  shift, and go to state 48

    liste_declarateurs  go to state 49
    declarateur         go to state 50


State 30

    1 programme: main '(' ')' '{' liste_instructions . returne '}'

    RETURN  shift, and go to state 51

    $default  reduce using rule 87 (returne)

    returne  go to state 52


State 31

   23 liste_instructions: instruction . liste_instructions
   24                   | instruction .

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 21
    SWITCH          shift, and go to state 22
    CASE            shift, and go to state 23
    DEFAULT         shift, and go to state 24
    IF              shift, and go to state 25
    IDENTIFICATEUR  shift, and go to state 26
    UNARY           shift, and go to state 27

    VOID            [reduce using rule 26 (instruction)]
    INT             [reduce using rule 26 (instruction)]
    FOR             [reduce using rule 26 (instruction)]
    SWITCH          [reduce using rule 26 (instruction)]
    CASE            [reduce using rule 26 (instruction)]
    DEFAULT         [reduce using rule 26 (instruction)]
    IF              [reduce using rule 26 (instruction)]
    IDENTIFICATEUR  [reduce using rule 26 (instruction)]
    UNARY           [reduce using rule 26 (instruction)]
    RETURN          reduce using rule 24 (liste_instructions)
    RETURN          [reduce using rule 25 (liste_instructions)]
    RETURN          [reduce using rule 26 (instruction)]
    '}'             reduce using rule 24 (liste_instructions)
    '}'             [reduce using rule 25 (liste_instructions)]
    '}'             [reduce using rule 26 (instruction)]
    ';'             reduce using rule 26 (instruction)
    ';'             [reduce using rule 33 (instruction1)]
    $default        reduce using rule 24 (liste_instructions)

    declaration         go to state 28
    datatype            go to state 29
    liste_instructions  go to state 53
    instruction         go to state 31
    instruction1        go to state 32
    selection           go to state 33
    appel               go to state 34


State 32

   30 instruction: instruction1 . ';'

    ';'  shift, and go to state 54


State 33

   29 instruction: selection .

    $default  reduce using rule 29 (instruction)


State 34

   31 instruction: appel .

    $default  reduce using rule 31 (instruction)


State 35

   13 parm: INT . $@3 IDENTIFICATEUR

    $default  reduce using rule 12 ($@3)

    $@3  go to state 55


State 36

    8 externe: EXTERN datatype IDENTIFICATEUR $@2 '(' liste_parms . ')' ';'
    9 liste_parms: liste_parms . ',' parm

    ')'  shift, and go to state 56
    ','  shift, and go to state 57


State 37

   10 liste_parms: parm .

    $default  reduce using rule 10 (liste_parms)


State 38

   28 instruction: FOR $@5 . '(' instruction1 ';' condition ';' instruction1 ')' instruction

    '('  shift, and go to state 58


State 39

   46 selection: SWITCH '(' . expression ')' instruction

    CONSTANTE       shift, and go to state 59
    IDENTIFICATEUR  shift, and go to state 60
    MOINS           shift, and go to state 61
    '('             shift, and go to state 62

    variable    go to state 63
    tableu      go to state 64
    expression  go to state 65
    valeur      go to state 66


State 40

   47 selection: CASE CONSTANTE . ':' instruction

    ':'  shift, and go to state 67


State 41

   48 selection: DEFAULT ':' . instruction

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 21
    SWITCH          shift, and go to state 22
    CASE            shift, and go to state 23
    DEFAULT         shift, and go to state 24
    IF              shift, and go to state 25
    IDENTIFICATEUR  shift, and go to state 26
    UNARY           shift, and go to state 27

    VOID            [reduce using rule 26 (instruction)]
    INT             [reduce using rule 26 (instruction)]
    FOR             [reduce using rule 26 (instruction)]
    SWITCH          [reduce using rule 26 (instruction)]
    CASE            [reduce using rule 26 (instruction)]
    DEFAULT         [reduce using rule 26 (instruction)]
    IF              [reduce using rule 26 (instruction)]
    IDENTIFICATEUR  [reduce using rule 26 (instruction)]
    UNARY           [reduce using rule 26 (instruction)]
    ';'             reduce using rule 26 (instruction)
    ';'             [reduce using rule 33 (instruction1)]
    $default        reduce using rule 26 (instruction)

    declaration   go to state 28
    datatype      go to state 29
    instruction   go to state 68
    instruction1  go to state 32
    selection     go to state 33
    appel         go to state 34


State 42

   45 selection: IF $@9 . '(' condition ')' $@10 instruction $@11 ELSE instruction

    '('  shift, and go to state 69


State 43

   49 appel: IDENTIFICATEUR '(' . liste_expressions ')' ';'

    CONSTANTE       shift, and go to state 59
    IDENTIFICATEUR  shift, and go to state 60
    MOINS           shift, and go to state 61
    '('             shift, and go to state 62

    variable           go to state 63
    tableu             go to state 64
    expression         go to state 70
    liste_expressions  go to state 71
    valeur             go to state 66


State 44

   35 instruction1: IDENTIFICATEUR $@6 . '=' expression

    '='  shift, and go to state 72


State 45

   37 instruction1: IDENTIFICATEUR $@7 . relop expression

    LEQ  shift, and go to state 73
    GEQ  shift, and go to state 74
    EQ   shift, and go to state 75
    GT   shift, and go to state 76
    LT   shift, and go to state 77
    NEQ  shift, and go to state 78

    relop  go to state 79


State 46

   39 instruction1: IDENTIFICATEUR $@8 . UNARY

    UNARY  shift, and go to state 80


State 47

   40 instruction1: UNARY IDENTIFICATEUR .

    $default  reduce using rule 40 (instruction1)


State 48

   17 declarateur: IDENTIFICATEUR .

    $default  reduce using rule 17 (declarateur)


State 49

   20 declaration: datatype liste_declarateurs . ';'

    ';'  shift, and go to state 81


State 50

   14 liste_declarateurs: declarateur . ',' liste_declarateurs
   15                   | declarateur .
   16                   | declarateur . init
   19 declarateur: declarateur . '[' CONSTANTE $@4 ']'

    ','  shift, and go to state 82
    '['  shift, and go to state 83
    '='  shift, and go to state 84

    $default  reduce using rule 15 (liste_declarateurs)

    init  go to state 85


State 51

   85 returne: RETURN . expression ';'
   86        | RETURN . ';'

    CONSTANTE       shift, and go to state 59
    IDENTIFICATEUR  shift, and go to state 60
    MOINS           shift, and go to state 61
    '('             shift, and go to state 62
    ';'             shift, and go to state 86

    variable    go to state 63
    tableu      go to state 64
    expression  go to state 87
    valeur      go to state 66


State 52

    1 programme: main '(' ')' '{' liste_instructions returne . '}'

    '}'  shift, and go to state 88


State 53

   23 liste_instructions: instruction liste_instructions .

    $default  reduce using rule 23 (liste_instructions)


State 54

   30 instruction: instruction1 ';' .

    $default  reduce using rule 30 (instruction)


State 55

   13 parm: INT $@3 . IDENTIFICATEUR

    IDENTIFICATEUR  shift, and go to state 89


State 56

    8 externe: EXTERN datatype IDENTIFICATEUR $@2 '(' liste_parms ')' . ';'

    ';'  shift, and go to state 90


State 57

    9 liste_parms: liste_parms ',' . parm

    INT  shift, and go to state 35

    parm  go to state 91


State 58

   28 instruction: FOR $@5 '(' . instruction1 ';' condition ';' instruction1 ')' instruction

    IDENTIFICATEUR  shift, and go to state 92
    UNARY           shift, and go to state 27

    $default  reduce using rule 33 (instruction1)

    instruction1  go to state 93


State 59

   58 expression: CONSTANTE . $@12
   83 valeur: CONSTANTE .

    LEQ       reduce using rule 57 ($@12)
    LEQ       [reduce using rule 83 (valeur)]
    GEQ       reduce using rule 57 ($@12)
    GEQ       [reduce using rule 83 (valeur)]
    EQ        reduce using rule 57 ($@12)
    EQ        [reduce using rule 83 (valeur)]
    GT        reduce using rule 57 ($@12)
    GT        [reduce using rule 83 (valeur)]
    LT        reduce using rule 57 ($@12)
    LT        [reduce using rule 83 (valeur)]
    NEQ       reduce using rule 57 ($@12)
    NEQ       [reduce using rule 83 (valeur)]
    PLUS      reduce using rule 57 ($@12)
    PLUS      [reduce using rule 83 (valeur)]
    MUL       reduce using rule 57 ($@12)
    MUL       [reduce using rule 83 (valeur)]
    DIV       reduce using rule 57 ($@12)
    DIV       [reduce using rule 83 (valeur)]
    MOINS     reduce using rule 57 ($@12)
    MOINS     [reduce using rule 83 (valeur)]
    ')'       reduce using rule 57 ($@12)
    ')'       [reduce using rule 83 (valeur)]
    ';'       reduce using rule 57 ($@12)
    ';'       [reduce using rule 83 (valeur)]
    ','       reduce using rule 57 ($@12)
    ','       [reduce using rule 83 (valeur)]
    ']'       reduce using rule 57 ($@12)
    ']'       [reduce using rule 83 (valeur)]
    $default  reduce using rule 57 ($@12)

    $@12  go to state 94


State 60

   50 variable: IDENTIFICATEUR .
   53 tableu: IDENTIFICATEUR .
   60 expression: IDENTIFICATEUR . '(' liste_expressions ')'
   84 valeur: IDENTIFICATEUR .

    '('  shift, and go to state 95

    LEQ       reduce using rule 50 (variable)
    LEQ       [reduce using rule 53 (tableu)]
    LEQ       [reduce using rule 84 (valeur)]
    GEQ       reduce using rule 50 (variable)
    GEQ       [reduce using rule 53 (tableu)]
    GEQ       [reduce using rule 84 (valeur)]
    EQ        reduce using rule 50 (variable)
    EQ        [reduce using rule 53 (tableu)]
    EQ        [reduce using rule 84 (valeur)]
    GT        reduce using rule 50 (variable)
    GT        [reduce using rule 53 (tableu)]
    GT        [reduce using rule 84 (valeur)]
    LT        reduce using rule 50 (variable)
    LT        [reduce using rule 53 (tableu)]
    LT        [reduce using rule 84 (valeur)]
    NEQ       reduce using rule 50 (variable)
    NEQ       [reduce using rule 53 (tableu)]
    NEQ       [reduce using rule 84 (valeur)]
    PLUS      reduce using rule 50 (variable)
    PLUS      [reduce using rule 53 (tableu)]
    PLUS      [reduce using rule 84 (valeur)]
    MUL       reduce using rule 50 (variable)
    MUL       [reduce using rule 53 (tableu)]
    MUL       [reduce using rule 84 (valeur)]
    DIV       reduce using rule 50 (variable)
    DIV       [reduce using rule 53 (tableu)]
    DIV       [reduce using rule 84 (valeur)]
    MOINS     reduce using rule 50 (variable)
    MOINS     [reduce using rule 53 (tableu)]
    MOINS     [reduce using rule 84 (valeur)]
    ')'       reduce using rule 50 (variable)
    ')'       [reduce using rule 53 (tableu)]
    ')'       [reduce using rule 84 (valeur)]
    ';'       reduce using rule 50 (variable)
    ';'       [reduce using rule 53 (tableu)]
    ';'       [reduce using rule 84 (valeur)]
    ','       reduce using rule 50 (variable)
    ','       [reduce using rule 53 (tableu)]
    ','       [reduce using rule 84 (valeur)]
    '['       reduce using rule 53 (tableu)
    ']'       reduce using rule 50 (variable)
    ']'       [reduce using rule 53 (tableu)]
    ']'       [reduce using rule 84 (valeur)]
    $default  reduce using rule 50 (variable)


State 61

   56 expression: MOINS . expression

    CONSTANTE       shift, and go to state 59
    IDENTIFICATEUR  shift, and go to state 60
    MOINS           shift, and go to state 61
    '('             shift, and go to state 62

    variable    go to state 63
    tableu      go to state 64
    expression  go to state 96
    valeur      go to state 66


State 62

   54 expression: '(' . expression ')'

    CONSTANTE       shift, and go to state 59
    IDENTIFICATEUR  shift, and go to state 60
    MOINS           shift, and go to state 61
    '('             shift, and go to state 62

    variable    go to state 63
    tableu      go to state 64
    expression  go to state 97
    valeur      go to state 66


State 63

   59 expression: variable .

    $default  reduce using rule 59 (expression)


State 64

   51 variable: tableu .
   52 tableu: tableu . '[' expression ']'

    '['  shift, and go to state 98

    $default  reduce using rule 51 (variable)


State 65

   46 selection: SWITCH '(' expression . ')' instruction
   55 expression: expression . binary_op expression
   71           | expression . arithmetic expression

    PLUS   shift, and go to state 99
    MUL    shift, and go to state 100
    DIV    shift, and go to state 101
    MOINS  shift, and go to state 102
    ')'    shift, and go to state 103

    binary_op   go to state 104
    arithmetic  go to state 105


State 66

   72 expression: valeur .

    $default  reduce using rule 72 (expression)


State 67

   47 selection: CASE CONSTANTE ':' . instruction

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 21
    SWITCH          shift, and go to state 22
    CASE            shift, and go to state 23
    DEFAULT         shift, and go to state 24
    IF              shift, and go to state 25
    IDENTIFICATEUR  shift, and go to state 26
    UNARY           shift, and go to state 27

    VOID            [reduce using rule 26 (instruction)]
    INT             [reduce using rule 26 (instruction)]
    FOR             [reduce using rule 26 (instruction)]
    SWITCH          [reduce using rule 26 (instruction)]
    CASE            [reduce using rule 26 (instruction)]
    DEFAULT         [reduce using rule 26 (instruction)]
    IF              [reduce using rule 26 (instruction)]
    IDENTIFICATEUR  [reduce using rule 26 (instruction)]
    UNARY           [reduce using rule 26 (instruction)]
    ';'             reduce using rule 26 (instruction)
    ';'             [reduce using rule 33 (instruction1)]
    $default        reduce using rule 26 (instruction)

    declaration   go to state 28
    datatype      go to state 29
    instruction   go to state 106
    instruction1  go to state 32
    selection     go to state 33
    appel         go to state 34


State 68

   48 selection: DEFAULT ':' instruction .

    $default  reduce using rule 48 (selection)


State 69

   45 selection: IF $@9 '(' . condition ')' $@10 instruction $@11 ELSE instruction

    TRUE            shift, and go to state 107
    FALSE           shift, and go to state 108
    CONSTANTE       shift, and go to state 59
    IDENTIFICATEUR  shift, and go to state 60
    MOINS           shift, and go to state 61
    '('             shift, and go to state 62

    $default  reduce using rule 70 (condition)

    variable    go to state 63
    tableu      go to state 64
    expression  go to state 109
    condition   go to state 110
    valeur      go to state 66


State 70

   55 expression: expression . binary_op expression
   62 liste_expressions: expression .
   71 expression: expression . arithmetic expression

    PLUS   shift, and go to state 99
    MUL    shift, and go to state 100
    DIV    shift, and go to state 101
    MOINS  shift, and go to state 102

    $default  reduce using rule 62 (liste_expressions)

    binary_op   go to state 104
    arithmetic  go to state 105


State 71

   49 appel: IDENTIFICATEUR '(' liste_expressions . ')' ';'
   61 liste_expressions: liste_expressions . ',' expression

    ')'  shift, and go to state 111
    ','  shift, and go to state 112


State 72

   35 instruction1: IDENTIFICATEUR $@6 '=' . expression

    CONSTANTE       shift, and go to state 59
    IDENTIFICATEUR  shift, and go to state 60
    MOINS           shift, and go to state 61
    '('             shift, and go to state 62

    variable    go to state 63
    tableu      go to state 64
    expression  go to state 113
    valeur      go to state 66


State 73

   79 relop: LEQ .

    $default  reduce using rule 79 (relop)


State 74

   80 relop: GEQ .

    $default  reduce using rule 80 (relop)


State 75

   81 relop: EQ .

    $default  reduce using rule 81 (relop)


State 76

   78 relop: GT .

    $default  reduce using rule 78 (relop)


State 77

   77 relop: LT .

    $default  reduce using rule 77 (relop)


State 78

   82 relop: NEQ .

    $default  reduce using rule 82 (relop)


State 79

   37 instruction1: IDENTIFICATEUR $@7 relop . expression

    CONSTANTE       shift, and go to state 59
    IDENTIFICATEUR  shift, and go to state 60
    MOINS           shift, and go to state 61
    '('             shift, and go to state 62

    variable    go to state 63
    tableu      go to state 64
    expression  go to state 114
    valeur      go to state 66


State 80

   39 instruction1: IDENTIFICATEUR $@8 UNARY .

    $default  reduce using rule 39 (instruction1)


State 81

   20 declaration: datatype liste_declarateurs ';' .

    $default  reduce using rule 20 (declaration)


State 82

   14 liste_declarateurs: declarateur ',' . liste_declarateurs

    IDENTIFICATEUR  shift, and go to state 48

    liste_declarateurs  go to state 115
    declarateur         go to state 50


State 83

   19 declarateur: declarateur '[' . CONSTANTE $@4 ']'

    CONSTANTE  shift, and go to state 116


State 84

   41 init: '=' . valeur

    CONSTANTE       shift, and go to state 117
    IDENTIFICATEUR  shift, and go to state 118

    valeur  go to state 119


State 85

   16 liste_declarateurs: declarateur init .

    $default  reduce using rule 16 (liste_declarateurs)


State 86

   86 returne: RETURN ';' .

    $default  reduce using rule 86 (returne)


State 87

   55 expression: expression . binary_op expression
   71           | expression . arithmetic expression
   85 returne: RETURN expression . ';'

    PLUS   shift, and go to state 99
    MUL    shift, and go to state 100
    DIV    shift, and go to state 101
    MOINS  shift, and go to state 102
    ';'    shift, and go to state 120

    binary_op   go to state 104
    arithmetic  go to state 105


State 88

    1 programme: main '(' ')' '{' liste_instructions returne '}' .

    $default  reduce using rule 1 (programme)


State 89

   13 parm: INT $@3 IDENTIFICATEUR .

    $default  reduce using rule 13 (parm)


State 90

    8 externe: EXTERN datatype IDENTIFICATEUR $@2 '(' liste_parms ')' ';' .

    $default  reduce using rule 8 (externe)


State 91

    9 liste_parms: liste_parms ',' parm .

    $default  reduce using rule 9 (liste_parms)


State 92

   35 instruction1: IDENTIFICATEUR . $@6 '=' expression
   37             | IDENTIFICATEUR . $@7 relop expression
   39             | IDENTIFICATEUR . $@8 UNARY

    UNARY     reduce using rule 38 ($@8)
    '='       reduce using rule 34 ($@6)
    $default  reduce using rule 36 ($@7)

    $@6  go to state 44
    $@7  go to state 45
    $@8  go to state 46


State 93

   28 instruction: FOR $@5 '(' instruction1 . ';' condition ';' instruction1 ')' instruction

    ';'  shift, and go to state 121


State 94

   58 expression: CONSTANTE $@12 .

    $default  reduce using rule 58 (expression)


State 95

   60 expression: IDENTIFICATEUR '(' . liste_expressions ')'

    CONSTANTE       shift, and go to state 59
    IDENTIFICATEUR  shift, and go to state 60
    MOINS           shift, and go to state 61
    '('             shift, and go to state 62

    variable           go to state 63
    tableu             go to state 64
    expression         go to state 70
    liste_expressions  go to state 122
    valeur             go to state 66


State 96

   55 expression: expression . binary_op expression
   56           | MOINS expression .
   71           | expression . arithmetic expression

    PLUS   shift, and go to state 99
    MUL    shift, and go to state 100
    DIV    shift, and go to state 101
    MOINS  shift, and go to state 102

    PLUS      [reduce using rule 56 (expression)]
    MUL       [reduce using rule 56 (expression)]
    DIV       [reduce using rule 56 (expression)]
    MOINS     [reduce using rule 56 (expression)]
    $default  reduce using rule 56 (expression)

    binary_op   go to state 104
    arithmetic  go to state 105


State 97

   54 expression: '(' expression . ')'
   55           | expression . binary_op expression
   71           | expression . arithmetic expression

    PLUS   shift, and go to state 99
    MUL    shift, and go to state 100
    DIV    shift, and go to state 101
    MOINS  shift, and go to state 102
    ')'    shift, and go to state 123

    binary_op   go to state 104
    arithmetic  go to state 105


State 98

   52 tableu: tableu '[' . expression ']'

    CONSTANTE       shift, and go to state 59
    IDENTIFICATEUR  shift, and go to state 60
    MOINS           shift, and go to state 61
    '('             shift, and go to state 62

    variable    go to state 63
    tableu      go to state 64
    expression  go to state 124
    valeur      go to state 66


State 99

   63 binary_op: PLUS .
   73 arithmetic: PLUS .

    CONSTANTE       reduce using rule 63 (binary_op)
    CONSTANTE       [reduce using rule 73 (arithmetic)]
    IDENTIFICATEUR  reduce using rule 63 (binary_op)
    IDENTIFICATEUR  [reduce using rule 73 (arithmetic)]
    MOINS           reduce using rule 63 (binary_op)
    MOINS           [reduce using rule 73 (arithmetic)]
    '('             reduce using rule 63 (binary_op)
    '('             [reduce using rule 73 (arithmetic)]
    $default        reduce using rule 63 (binary_op)


State 100

   65 binary_op: MUL .
   75 arithmetic: MUL .

    CONSTANTE       reduce using rule 65 (binary_op)
    CONSTANTE       [reduce using rule 75 (arithmetic)]
    IDENTIFICATEUR  reduce using rule 65 (binary_op)
    IDENTIFICATEUR  [reduce using rule 75 (arithmetic)]
    MOINS           reduce using rule 65 (binary_op)
    MOINS           [reduce using rule 75 (arithmetic)]
    '('             reduce using rule 65 (binary_op)
    '('             [reduce using rule 75 (arithmetic)]
    $default        reduce using rule 65 (binary_op)


State 101

   66 binary_op: DIV .
   76 arithmetic: DIV .

    CONSTANTE       reduce using rule 66 (binary_op)
    CONSTANTE       [reduce using rule 76 (arithmetic)]
    IDENTIFICATEUR  reduce using rule 66 (binary_op)
    IDENTIFICATEUR  [reduce using rule 76 (arithmetic)]
    MOINS           reduce using rule 66 (binary_op)
    MOINS           [reduce using rule 76 (arithmetic)]
    '('             reduce using rule 66 (binary_op)
    '('             [reduce using rule 76 (arithmetic)]
    $default        reduce using rule 66 (binary_op)


State 102

   64 binary_op: MOINS .
   74 arithmetic: MOINS .

    CONSTANTE       reduce using rule 64 (binary_op)
    CONSTANTE       [reduce using rule 74 (arithmetic)]
    IDENTIFICATEUR  reduce using rule 64 (binary_op)
    IDENTIFICATEUR  [reduce using rule 74 (arithmetic)]
    MOINS           reduce using rule 64 (binary_op)
    MOINS           [reduce using rule 74 (arithmetic)]
    '('             reduce using rule 64 (binary_op)
    '('             [reduce using rule 74 (arithmetic)]
    $default        reduce using rule 64 (binary_op)


State 103

   46 selection: SWITCH '(' expression ')' . instruction

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 21
    SWITCH          shift, and go to state 22
    CASE            shift, and go to state 23
    DEFAULT         shift, and go to state 24
    IF              shift, and go to state 25
    IDENTIFICATEUR  shift, and go to state 26
    UNARY           shift, and go to state 27

    VOID            [reduce using rule 26 (instruction)]
    INT             [reduce using rule 26 (instruction)]
    FOR             [reduce using rule 26 (instruction)]
    SWITCH          [reduce using rule 26 (instruction)]
    CASE            [reduce using rule 26 (instruction)]
    DEFAULT         [reduce using rule 26 (instruction)]
    IF              [reduce using rule 26 (instruction)]
    IDENTIFICATEUR  [reduce using rule 26 (instruction)]
    UNARY           [reduce using rule 26 (instruction)]
    ';'             reduce using rule 26 (instruction)
    ';'             [reduce using rule 33 (instruction1)]
    $default        reduce using rule 26 (instruction)

    declaration   go to state 28
    datatype      go to state 29
    instruction   go to state 125
    instruction1  go to state 32
    selection     go to state 33
    appel         go to state 34


State 104

   55 expression: expression binary_op . expression

    CONSTANTE       shift, and go to state 59
    IDENTIFICATEUR  shift, and go to state 60
    MOINS           shift, and go to state 61
    '('             shift, and go to state 62

    variable    go to state 63
    tableu      go to state 64
    expression  go to state 126
    valeur      go to state 66


State 105

   71 expression: expression arithmetic . expression

    CONSTANTE       shift, and go to state 59
    IDENTIFICATEUR  shift, and go to state 60
    MOINS           shift, and go to state 61
    '('             shift, and go to state 62

    variable    go to state 63
    tableu      go to state 64
    expression  go to state 127
    valeur      go to state 66


State 106

   47 selection: CASE CONSTANTE ':' instruction .

    $default  reduce using rule 47 (selection)


State 107

   68 condition: TRUE .

    $default  reduce using rule 68 (condition)


State 108

   69 condition: FALSE .

    $default  reduce using rule 69 (condition)


State 109

   55 expression: expression . binary_op expression
   67 condition: expression . relop expression
   71 expression: expression . arithmetic expression

    LEQ    shift, and go to state 73
    GEQ    shift, and go to state 74
    EQ     shift, and go to state 75
    GT     shift, and go to state 76
    LT     shift, and go to state 77
    NEQ    shift, and go to state 78
    PLUS   shift, and go to state 99
    MUL    shift, and go to state 100
    DIV    shift, and go to state 101
    MOINS  shift, and go to state 102

    binary_op   go to state 104
    arithmetic  go to state 105
    relop       go to state 128


State 110

   45 selection: IF $@9 '(' condition . ')' $@10 instruction $@11 ELSE instruction

    ')'  shift, and go to state 129


State 111

   49 appel: IDENTIFICATEUR '(' liste_expressions ')' . ';'

    ';'  shift, and go to state 130


State 112

   61 liste_expressions: liste_expressions ',' . expression

    CONSTANTE       shift, and go to state 59
    IDENTIFICATEUR  shift, and go to state 60
    MOINS           shift, and go to state 61
    '('             shift, and go to state 62

    variable    go to state 63
    tableu      go to state 64
    expression  go to state 131
    valeur      go to state 66


State 113

   35 instruction1: IDENTIFICATEUR $@6 '=' expression .
   55 expression: expression . binary_op expression
   71           | expression . arithmetic expression

    PLUS   shift, and go to state 99
    MUL    shift, and go to state 100
    DIV    shift, and go to state 101
    MOINS  shift, and go to state 102

    $default  reduce using rule 35 (instruction1)

    binary_op   go to state 104
    arithmetic  go to state 105


State 114

   37 instruction1: IDENTIFICATEUR $@7 relop expression .
   55 expression: expression . binary_op expression
   71           | expression . arithmetic expression

    PLUS   shift, and go to state 99
    MUL    shift, and go to state 100
    DIV    shift, and go to state 101
    MOINS  shift, and go to state 102

    $default  reduce using rule 37 (instruction1)

    binary_op   go to state 104
    arithmetic  go to state 105


State 115

   14 liste_declarateurs: declarateur ',' liste_declarateurs .

    $default  reduce using rule 14 (liste_declarateurs)


State 116

   19 declarateur: declarateur '[' CONSTANTE . $@4 ']'

    $default  reduce using rule 18 ($@4)

    $@4  go to state 132


State 117

   83 valeur: CONSTANTE .

    $default  reduce using rule 83 (valeur)


State 118

   84 valeur: IDENTIFICATEUR .

    $default  reduce using rule 84 (valeur)


State 119

   41 init: '=' valeur .

    $default  reduce using rule 41 (init)


State 120

   85 returne: RETURN expression ';' .

    $default  reduce using rule 85 (returne)


State 121

   28 instruction: FOR $@5 '(' instruction1 ';' . condition ';' instruction1 ')' instruction

    TRUE            shift, and go to state 107
    FALSE           shift, and go to state 108
    CONSTANTE       shift, and go to state 59
    IDENTIFICATEUR  shift, and go to state 60
    MOINS           shift, and go to state 61
    '('             shift, and go to state 62

    $default  reduce using rule 70 (condition)

    variable    go to state 63
    tableu      go to state 64
    expression  go to state 109
    condition   go to state 133
    valeur      go to state 66


State 122

   60 expression: IDENTIFICATEUR '(' liste_expressions . ')'
   61 liste_expressions: liste_expressions . ',' expression

    ')'  shift, and go to state 134
    ','  shift, and go to state 112


State 123

   54 expression: '(' expression ')' .

    $default  reduce using rule 54 (expression)


State 124

   52 tableu: tableu '[' expression . ']'
   55 expression: expression . binary_op expression
   71           | expression . arithmetic expression

    PLUS   shift, and go to state 99
    MUL    shift, and go to state 100
    DIV    shift, and go to state 101
    MOINS  shift, and go to state 102
    ']'    shift, and go to state 135

    binary_op   go to state 104
    arithmetic  go to state 105


State 125

   46 selection: SWITCH '(' expression ')' instruction .

    $default  reduce using rule 46 (selection)


State 126

   55 expression: expression . binary_op expression
   55           | expression binary_op expression .
   71           | expression . arithmetic expression

    PLUS   shift, and go to state 99
    MUL    shift, and go to state 100
    DIV    shift, and go to state 101
    MOINS  shift, and go to state 102

    PLUS      [reduce using rule 55 (expression)]
    MUL       [reduce using rule 55 (expression)]
    DIV       [reduce using rule 55 (expression)]
    MOINS     [reduce using rule 55 (expression)]
    $default  reduce using rule 55 (expression)

    binary_op   go to state 104
    arithmetic  go to state 105


State 127

   55 expression: expression . binary_op expression
   71           | expression . arithmetic expression
   71           | expression arithmetic expression .

    PLUS   shift, and go to state 99
    MUL    shift, and go to state 100
    DIV    shift, and go to state 101
    MOINS  shift, and go to state 102

    PLUS      [reduce using rule 71 (expression)]
    MUL       [reduce using rule 71 (expression)]
    DIV       [reduce using rule 71 (expression)]
    MOINS     [reduce using rule 71 (expression)]
    $default  reduce using rule 71 (expression)

    binary_op   go to state 104
    arithmetic  go to state 105


State 128

   67 condition: expression relop . expression

    CONSTANTE       shift, and go to state 59
    IDENTIFICATEUR  shift, and go to state 60
    MOINS           shift, and go to state 61
    '('             shift, and go to state 62

    variable    go to state 63
    tableu      go to state 64
    expression  go to state 136
    valeur      go to state 66


State 129

   45 selection: IF $@9 '(' condition ')' . $@10 instruction $@11 ELSE instruction

    $default  reduce using rule 43 ($@10)

    $@10  go to state 137


State 130

   49 appel: IDENTIFICATEUR '(' liste_expressions ')' ';' .

    $default  reduce using rule 49 (appel)


State 131

   55 expression: expression . binary_op expression
   61 liste_expressions: liste_expressions ',' expression .
   71 expression: expression . arithmetic expression

    PLUS   shift, and go to state 99
    MUL    shift, and go to state 100
    DIV    shift, and go to state 101
    MOINS  shift, and go to state 102

    $default  reduce using rule 61 (liste_expressions)

    binary_op   go to state 104
    arithmetic  go to state 105


State 132

   19 declarateur: declarateur '[' CONSTANTE $@4 . ']'

    ']'  shift, and go to state 138


State 133

   28 instruction: FOR $@5 '(' instruction1 ';' condition . ';' instruction1 ')' instruction

    ';'  shift, and go to state 139


State 134

   60 expression: IDENTIFICATEUR '(' liste_expressions ')' .

    $default  reduce using rule 60 (expression)


State 135

   52 tableu: tableu '[' expression ']' .

    $default  reduce using rule 52 (tableu)


State 136

   55 expression: expression . binary_op expression
   67 condition: expression relop expression .
   71 expression: expression . arithmetic expression

    PLUS   shift, and go to state 99
    MUL    shift, and go to state 100
    DIV    shift, and go to state 101
    MOINS  shift, and go to state 102

    $default  reduce using rule 67 (condition)

    binary_op   go to state 104
    arithmetic  go to state 105


State 137

   45 selection: IF $@9 '(' condition ')' $@10 . instruction $@11 ELSE instruction

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 21
    SWITCH          shift, and go to state 22
    CASE            shift, and go to state 23
    DEFAULT         shift, and go to state 24
    IF              shift, and go to state 25
    IDENTIFICATEUR  shift, and go to state 26
    UNARY           shift, and go to state 27

    ';'       reduce using rule 33 (instruction1)
    $default  reduce using rule 26 (instruction)

    declaration   go to state 28
    datatype      go to state 29
    instruction   go to state 140
    instruction1  go to state 32
    selection     go to state 33
    appel         go to state 34


State 138

   19 declarateur: declarateur '[' CONSTANTE $@4 ']' .

    $default  reduce using rule 19 (declarateur)


State 139

   28 instruction: FOR $@5 '(' instruction1 ';' condition ';' . instruction1 ')' instruction

    IDENTIFICATEUR  shift, and go to state 92
    UNARY           shift, and go to state 27

    $default  reduce using rule 33 (instruction1)

    instruction1  go to state 141


State 140

   45 selection: IF $@9 '(' condition ')' $@10 instruction . $@11 ELSE instruction

    $default  reduce using rule 44 ($@11)

    $@11  go to state 142


State 141

   28 instruction: FOR $@5 '(' instruction1 ';' condition ';' instruction1 . ')' instruction

    ')'  shift, and go to state 143


State 142

   45 selection: IF $@9 '(' condition ')' $@10 instruction $@11 . ELSE instruction

    ELSE  shift, and go to state 144


State 143

   28 instruction: FOR $@5 '(' instruction1 ';' condition ';' instruction1 ')' . instruction

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 21
    SWITCH          shift, and go to state 22
    CASE            shift, and go to state 23
    DEFAULT         shift, and go to state 24
    IF              shift, and go to state 25
    IDENTIFICATEUR  shift, and go to state 26
    UNARY           shift, and go to state 27

    VOID            [reduce using rule 26 (instruction)]
    INT             [reduce using rule 26 (instruction)]
    FOR             [reduce using rule 26 (instruction)]
    SWITCH          [reduce using rule 26 (instruction)]
    CASE            [reduce using rule 26 (instruction)]
    DEFAULT         [reduce using rule 26 (instruction)]
    IF              [reduce using rule 26 (instruction)]
    IDENTIFICATEUR  [reduce using rule 26 (instruction)]
    UNARY           [reduce using rule 26 (instruction)]
    ';'             reduce using rule 26 (instruction)
    ';'             [reduce using rule 33 (instruction1)]
    $default        reduce using rule 26 (instruction)

    declaration   go to state 28
    datatype      go to state 29
    instruction   go to state 145
    instruction1  go to state 32
    selection     go to state 33
    appel         go to state 34


State 144

   45 selection: IF $@9 '(' condition ')' $@10 instruction $@11 ELSE . instruction

    VOID            shift, and go to state 1
    INT             shift, and go to state 3
    FOR             shift, and go to state 21
    SWITCH          shift, and go to state 22
    CASE            shift, and go to state 23
    DEFAULT         shift, and go to state 24
    IF              shift, and go to state 25
    IDENTIFICATEUR  shift, and go to state 26
    UNARY           shift, and go to state 27

    VOID            [reduce using rule 26 (instruction)]
    INT             [reduce using rule 26 (instruction)]
    FOR             [reduce using rule 26 (instruction)]
    SWITCH          [reduce using rule 26 (instruction)]
    CASE            [reduce using rule 26 (instruction)]
    DEFAULT         [reduce using rule 26 (instruction)]
    IF              [reduce using rule 26 (instruction)]
    IDENTIFICATEUR  [reduce using rule 26 (instruction)]
    UNARY           [reduce using rule 26 (instruction)]
    ';'             reduce using rule 26 (instruction)
    ';'             [reduce using rule 33 (instruction1)]
    $default        reduce using rule 26 (instruction)

    declaration   go to state 28
    datatype      go to state 29
    instruction   go to state 146
    instruction1  go to state 32
    selection     go to state 33
    appel         go to state 34


State 145

   28 instruction: FOR $@5 '(' instruction1 ';' condition ';' instruction1 ')' instruction .

    $default  reduce using rule 28 (instruction)


State 146

   45 selection: IF $@9 '(' condition ')' $@10 instruction $@11 ELSE instruction .

    $default  reduce using rule 45 (selection)
